Search.setIndex({"docnames": ["examples", "index", "installation", "methods", "modules", "pyESD", "testing"], "filenames": ["examples.rst", "index.rst", "installation.rst", "methods.rst", "modules.rst", "pyESD.rst", "testing.rst"], "titles": ["Practical examples", "Python framwork for Empirical Statistical Downscaling", "Installation", "Methods", "API Reference", "pyESD package", "&lt;no title&gt;"], "terms": {"pyesd": [1, 2, 4], "i": [1, 2, 4, 5], "an": [1, 2, 5], "open": 1, "sourc": [1, 5], "framework": 1, "perfect": [1, 5], "prognosi": 1, "approach": 1, "ani": 1, "climat": [1, 5], "relat": 1, "variabl": [1, 5], "precipit": [1, 5], "temperatur": [1, 5], "wind": 1, "speed": 1, "us": [1, 2, 5], "reanalysi": 1, "product": 1, "eg": [1, 5], "era5": [1, 5], "predictor": [1, 3, 4, 5], "The": [1, 2, 5], "packag": [1, 2, 4], "featur": 1, "all": [1, 5], "cycl": [1, 5], "includ": 1, "data": [1, 3, 5], "preprocess": [1, 5], "select": [1, 3, 5], "construct": [1, 3], "transform": [1, 4, 5], "model": [1, 2, 4], "train": [1, 3, 5], "valid": [1, 5], "evalu": [1, 3, 4, 5], "futur": [1, 5], "predict": [1, 4, 5], "serv": 1, "mean": [1, 5], "gener": [1, 5], "circul": 1, "high": 1, "resolut": 1, "relev": 1, "impact": 1, "assess": 1, "drought": 1, "flood": 1, "wildfir": 1, "risk": [1, 5], "other": [1, 5], "main": 1, "specialti": 1, "well": 1, "design": [1, 5], "oop": 1, "style": [1, 5], "consid": 1, "weather": 1, "station": [1, 5], "individu": 1, "object": [1, 5], "routin": [1, 2, 5], "attribut": [1, 5], "thi": [1, 4, 5], "ensur": 1, "fewer": 1, "line": 1, "code": [1, 5], "cover": 1, "end": 1, "chang": 1, "mani": 1, "machin": 1, "learn": [1, 2, 3, 5], "algorithm": [1, 5], "techniqu": 1, "can": [1, 2, 5], "experi": 1, "toward": 1, "robust": [1, 5], "transfer": [1, 3], "function": [1, 3, 5], "coupl": [1, 3], "gcm": [1, 3], "estim": [1, 5], "And": 1, "ar": [1, 5], "highlight": 1, "paper": 1, "descript": [1, 5], "submit": 1, "instal": 1, "from": [1, 4, 5], "pypi": 1, "github": 1, "depend": [1, 5], "method": [1, 5], "practic": [1, 5], "exampl": [1, 5], "api": 1, "refer": [1, 5], "publish": 1, "under": [1, 4, 5], "mit": 1, "copyright": 1, "c": [1, 2], "2023": 1, "daniel": [1, 5], "boateng": [1, 5], "index": [1, 5], "modul": [1, 2, 4], "search": 1, "page": 1, "standard": [2, 4], "version": [2, 5], "intal": 2, "pip": 2, "same": [2, 5], "edit": 2, "mode": 2, "e": [2, 5], "flag": 2, "updat": 2, "develop": [2, 4, 5], "clone": 2, "git": 2, "com": 2, "dan": 2, "boat": 2, "folder": [2, 5], "It": [2, 5], "recommend": [2, 5], "isol": 2, "environ": 2, "virtualenv": 2, "conda": 2, "creat": [2, 5], "new": [2, 5], "requir": [2, 4, 5], "some": [2, 5], "through": [2, 5], "distro": 2, "If": [2, 5], "fail": 2, "follow": [2, 5], "manual": 2, "sklearn": [2, 5], "u": 2, "scikit": 2, "xarrai": [2, 5], "forg": 2, "dask": 2, "netcdf4": 2, "bottleneck": 2, "panda": [2, 5], "seaborn": [2, 5], "tensorflow": 2, "matplotlib": [2, 5], "eof": 2, "cartopi": 2, "option": [2, 5], "xgboost": 2, "optim": [2, 5], "prepar": 3, "submodul": 4, "esd_util": 4, "computestat": [4, 5], "dataset": [4, 5], "get": [4, 5], "midpointnorm": [4, 5], "stackarrai": [4, 5], "stattest": [4, 5], "_get_month": [4, 5], "extract_indices_around": [4, 5], "extract_region": [4, 5], "haversin": [4, 5], "levene_test": [4, 5], "load_all_st": [4, 5], "load_csv": [4, 5], "load_pickl": [4, 5], "map_to_xarrai": [4, 5], "plot_background": [4, 5], "plot_ks_stat": [4, 5], "ranksums_test": [4, 5], "store_csv": [4, 5], "store_pickl": [4, 5], "predictor_bas": 4, "fit": [4, 5], "load": [4, 5], "plot": 4, "save": [4, 5], "predictor_gener": 4, "regionalaverag": [4, 5], "stationoper": 4, "climate_scor": [4, 5], "cross_validate_and_predict": [4, 5], "ensemble_transform": [4, 5], "fit_predictor": [4, 5], "get_explained_vari": [4, 5], "get_var": [4, 5], "predictor_correl": [4, 5], "relative_predictor_import": [4, 5], "selected_nam": [4, 5], "set_model": [4, 5], "set_predictor": [4, 5], "set_standard": [4, 5], "set_transform": [4, 5], "tree_based_feature_import": [4, 5], "tree_based_feature_permutation_import": [4, 5], "load_stat": [4, 5], "weatherstationpreprocess": 4, "read_station_csv": [4, 5], "read_weatherstationnam": [4, 5], "read_weatherst": [4, 5], "dense_model": 4, "deeplearningregressor": [4, 5], "build_model": [4, 5], "compile_model": [4, 5], "convert_to_sklearn_regressor": [4, 5], "plot_network": [4, 5], "ensemble_model": 4, "ensembleregressor": [4, 5], "cross_val_predict": [4, 5], "cross_val_scor": [4, 5], "cross_valid": [4, 5], "get_param": [4, 5], "predict_averag": [4, 5], "score": [4, 5], "feature_select": 4, "recursivefeatureelimin": [4, 5], "cv_test_scor": [4, 5], "print_selected_featur": [4, 5], "sequentialfeatureselect": [4, 5], "treebasedselect": [4, 5], "feature_import": [4, 5], "permutation_importance_": [4, 5], "metric": 4, "mae": [4, 5], "mse": [4, 5], "nse": [4, 5], "r2_score": [4, 5], "rmse": [4, 5], "adjusted_r2": [4, 5], "explained_vari": [4, 5], "max_error": [4, 5], "hyperparameteroptim": [4, 5], "best_estim": [4, 5], "predict_log_proba": [4, 5], "metaattribut": [4, 5], "alpha": [4, 5], "best_param": [4, 5], "coef": [4, 5], "intercept": [4, 5], "set_param": [4, 5], "regressor": [4, 5], "barplot": [4, 5], "boxplot": [4, 5], "correlation_heatmap": [4, 5], "heatmap": [4, 5], "lineplot": [4, 5], "plot_monthly_mean": [4, 5], "plot_projection_comparison": [4, 5], "plot_time_seri": [4, 5], "scatterplot": [4, 5], "plot_util": 4, "apply_styl": [4, 5], "barplot_data": [4, 5], "boxplot_data": [4, 5], "correlation_data": [4, 5], "count_predictor": [4, 5], "extract_comparison_data_mean": [4, 5], "extract_time_seri": [4, 5], "monthly_mean": [4, 5], "prediction_example_data": [4, 5], "resample_monthli": [4, 5], "resample_season": [4, 5], "seasonal_mean": [4, 5], "predictand": 4, "predictandtimeseri": [4, 5], "splitter": 4, "monthlybooststrapp": [4, 5], "split": [4, 5], "get_n_split": [4, 5], "yearlybootstrapp": [4, 5], "monthlystandard": [4, 5], "inverse_transform": [4, 5], "nostandard": [4, 5], "pcascal": [4, 5], "fit_transform": [4, 5], "standardsc": [4, 5], "add_seasonal_cycl": [4, 5], "get_annual_mean_cycl": [4, 5], "get_mean_predict": [4, 5], "remove_seasonal_cycl": [4, 5], "teleconnect": 4, "ea": [4, 5], "plot_cov_matrix": [4, 5], "eawr": [4, 5], "mei": [4, 5], "nao": [4, 5], "scan": [4, 5], "eof_analysi": [4, 5], "data_preprocessing_util": 4, "mlr": 4, "bootstrappedforwardselect": [4, 5], "bootstrappedregress": [4, 5], "fit_predict": [4, 5], "forwardselect": [4, 5], "average_additional_result": [4, 5], "average_coef": [4, 5], "fit_act": [4, 5], "predict_act": [4, 5], "set_additional_result": [4, 5], "multiplelsregress": [4, 5], "set_expand_coef": [4, 5], "_get_act": [4, 5], "content": 4, "activ": [4, 5], "would": [4, 5], "upgrad": 4, "benefit": 4, "its": [4, 5], "extens": 4, "fri": 5, "nov": 5, "12": 5, "14": 5, "02": 5, "28": 5, "2021": 5, "author": 5, "dboateng": 5, "contian": 5, "util": 5, "class": 5, "esd": 5, "sx": 5, "y": 5, "sy": 5, "test": 5, "return_scor": 5, "true": 5, "part": 5, "parmap": 5, "map": 5, "work": 5, "ha": 5, "independ": 5, "name": 5, "domain_nam": 5, "base": 5, "varnam": 5, "select_domain": 5, "is_dataset": 5, "fals": 5, "vmin": 5, "none": 5, "vmax": 5, "midpoint": 5, "clip": 5, "normal": 5, "At": 5, "moment": 5, "bug": 5, "diverg": 5, "colormap": 5, "set": 5, "colorbar": 5, "rang": 5, "zero": 5, "both": 5, "differ": 5, "magnitud": 5, "might": 5, "possibl": 5, "color": 5, "offsetnorm": 5, "wa": 5, "origin": 5, "joe": 5, "kingto": 5, "modifi": 5, "bar": 5, "scale": 5, "0": 5, "1": 5, "divid": 5, "5": 5, "your": 5, "own": 5, "sinc": 5, "non": 5, "quantit": 5, "paramet": 5, "float": 5, "given": 5, "thei": 5, "initi": 5, "minimum": 5, "maximum": 5, "valu": 5, "respect": 5, "first": 5, "input": 5, "process": 5, "__call__": 5, "A": 5, "call": 5, "autoscale_non": 5, "bool": 5, "default": 5, "fall": 5, "outsid": 5, "whichev": 5, "closer": 5, "mask": 5, "remain": 5, "silent": 5, "defeat": 5, "purpos": 5, "over": 5, "so": 5, "like": 5, "lead": 5, "surpris": 5, "therefor": 5, "note": 5, "return": 5, "x": 5, "dim": 5, "stack": 5, "arrai": 5, "onli": 5, "one": 5, "dimens": 5, "left": 5, "dataarrai": 5, "sole": 5, "after": 5, "output": 5, "parallel": 5, "comput": 5, "statist": 5, "signific": 5, "between": 5, "two": 5, "xr": 5, "done": 5, "along": 5, "p": 5, "have": 5, "except": 5, "scalar": 5, "against": 5, "Or": 5, "singl": 5, "ensembl": 5, "sign": 5, "which": 5, "perform": 5, "k": 5, "kolmogorov": 5, "smirnov": 5, "mw": 5, "mann": 5, "whitnei": 5, "wc": 5, "wilcoxon": 5, "t": 5, "sampl": 5, "run": 5, "pvalx": 5, "contain": 5, "npdatetime64": 5, "month": 5, "januari": 5, "2": 5, "februari": 5, "lat": 5, "lon": 5, "radiu": 5, "datarang": 5, "minlat": 5, "maxlat": 5, "minlon": 5, "maxlon": 5, "lon1": 5, "lat1": 5, "lon2": 5, "lat2": 5, "path": 5, "stationnam": 5, "assum": 5, "store": 5, "quantiti": 5, "dictionari": 5, "datarrai": 5, "domain": 5, "ax": 5, "left_label": 5, "bottom_label": 5, "plot_coastlin": 5, "plot_bord": 5, "funtion": 5, "defin": 5, "also": 5, "specifi": 5, "background": 5, "handl": 5, "imshow": 5, "argument": 5, "param": 5, "type": 5, "domian": 5, "str": 5, "south": 5, "america": 5, "alaska": 5, "tibet": 5, "plateau": 5, "himalaya": 5, "eurosia": 5, "zealand": 5, "global": 5, "cmap": 5, "level": 5, "center": 5, "output_nam": 5, "output_format": 5, "level_tick": 5, "titl": 5, "path_to_stor": 5, "add_colorbar": 5, "hatch": 5, "fig": 5, "cbar_po": 5, "use_colorbar_default": 5, "orient": 5, "horizont": 5, "plot_project": 5, "plot_stat": 5, "stats_result": 5, "var": 5, "cachedir": 5, "45": 5, "longnam": 5, "abc": 5, "daterang": 5, "regener": 5, "patterns_from": 5, "params_from": 5, "plot_kwarg": 5, "03": 5, "09": 5, "standardizer_constructor": 5, "250": 5, "kwarg": 5, "sun": 5, "21": 5, "00": 5, "55": 5, "37": 5, "elev": 5, "fit_period": 5, "score_period": 5, "predictor_dataset": 5, "predictor_kwarg": 5, "calcul": 5, "string": 5, "pd": 5, "datetimeindex": 5, "should": 5, "stat_downscaling_tool": 5, "keyword": 5, "These": 5, "pass": 5, "": 5, "cscore": 5, "similar": 5, "rho": 5, "squar": 5, "skill": 5, "neg": 5, "even": 5, "wors": 5, "than": 5, "doubl": 5, "fit_predictand": 5, "return_cv_scor": 5, "predictor_selector": 5, "selector_method": 5, "recurs": 5, "selector_regressor": 5, "ridg": 5, "num_predictor": 5, "selector_direct": 5, "cal_relative_import": 5, "imput": 5, "impute_method": 5, "impute_ord": 5, "otherwis": 5, "anomali": 5, "pearson": 5, "directori": 5, "fname": 5, "weatherst": 5, "file": 5, "pickl": 5, "where": 5, "current": 5, "filenam": 5, "self": 5, "replac": 5, "_": 5, "ensemble_learn": 5, "cv": 5, "10": 5, "final_estimator_nam": 5, "r2": 5, "neg_root_mean_squared_error": 5, "detrend": 5, "01": 5, "43": 5, "download": 5, "directli": 5, "dwd": 5, "time": 5, "seri": 5, "monthli": 5, "frequenc": 5, "must": 5, "extract": 5, "number": 5, "year": 5, "write": 5, "addit": 5, "inform": 5, "separ": 5, "3": 5, "read": 5, "oper": 5, "specif": 5, "downlod": 5, "pleas": 5, "contact": 5, "uni": 5, "tuebingen": 5, "de": 5, "assist": 5, "return_al": 5, "varibal": 5, "downscal": 5, "rais": 5, "valueerror": 5, "w": 5, "path_to_data": 5, "namedict": 5, "dict": 5, "rel": 5, "absolut": 5, "wed": 5, "mar": 5, "16": 5, "26": 5, "2022": 5, "further": 5, "add": 5, "deep": 5, "adam": 5, "loss": 5, "mean_squared_error": 5, "rootmeansquarederror": 5, "epoch": 5, "1000": 5, "verbos": 5, "mon": 5, "11": 5, "35": 5, "n_job": 5, "passthrough": 5, "jan": 5, "17": 5, "18": 5, "regressor_nam": 5, "ard": 5, "n_featur": 5, "direct": 5, "forward": 5, "randomforest": 5, "34": 5, "25": 5, "y_true": 5, "y_pred": 5, "thu": 5, "param_grid": 5, "hyper_method": 5, "xlabel": 5, "ylabel": 5, "test_r2": 5, "varname_std": 5, "test_r2_std": 5, "validation_score_": 5, "legend": 5, "fig_path": 5, "fig_nam": 5, "show_error": 5, "width": 5, "rot": 5, "patch_artist": 5, "cbar_ax": 5, "add_cbar": 5, "label": 5, "correl": 5, "coefficinet": 5, "cbar": 5, "station_num": 5, "obs_train_nam": 5, "ob": 5, "1958": 5, "2010": 5, "obs_test_nam": 5, "2011": 5, "2020": 5, "val_predict_nam": 5, "test_predict_nam": 5, "std": 5, "lolim": 5, "id_nam": 5, "stationloc_dir": 5, "dataset_varnam": 5, "figpath": 5, "fignam": 5, "use_id": 5, "ymax": 5, "ymin": 5, "window": 5, "apr": 5, "49": 5, "fontsiz": 5, "20": 5, "linewidth": 5, "bmh": 5, "fivethirtyeight": 5, "use_cv_al": 5, "22": 5, "how": 5, "much": 5, "better": 5, "period": 5, "annual": 5, "mlr_learn": 5, "tue": 5, "52": 5, "13": 5, "n_split": 5, "500": 5, "test_siz": 5, "block_siz": 5, "group": 5, "num_block": 5, "num_sampl": 5, "n_block": 5, "shuffl": 5, "3333333333333333": 5, "min_month_per_year": 5, "9": 5, "pick": 5, "complet": 5, "you": 5, "yb": 5, "enumer": 5, "x_train": 5, "y_train": 5, "iloc": 5, "x_test": 5, "y_test": 5, "int": 5, "ratio": 5, "avail": 5, "pair": 5, "indic": 5, "datafram": 5, "dummi": 5, "baseestim": 5, "transformermixin": 5, "season": 5, "possibli": 5, "linear": 5, "trend": 5, "affect": 5, "remov": 5, "subtract": 5, "regress": 5, "afterward": 5, "varianc": 5, "whether": 5, "provid": 5, "hold": 5, "Not": 5, "previous": 5, "x_unstandard": 5, "unstandard": 5, "x_transform": 5, "just": 5, "doe": 5, "noth": 5, "n_compon": 5, "kernel": 5, "fit_param": 5, "shape": 5, "n_sampl": 5, "n_output": 5, "target": 5, "unsupervis": 5, "x_new": 5, "ndarrai": 5, "n_features_new": 5, "with_std": 5, "with_mean": 5, "unit_vari": 5, "norm": 5, "l2": 5, "mean_seasonal_cycl": 5, "numpi": 5, "re": 5, "column": 5, "each": 5, "invers": 5, "58": 5, "59": 5, "neof": 5, "eof_packag": 5, "apply_equal_wtg": 5, "pcscale": 5, "7": 5, "48": 5, "There": 5, "three": 5, "layer": 5, "bootstrap": 5, "outer": 5, "implement": 5, "loop": 5, "member": 5, "step": 5, "lasso": 5, "next": 5, "again": 5, "get_coef": 5, "set_coef": 5, "addition": 5, "mlr_model": 5, "min_explained_vari": 5, "easi": 5, "interfac": 5, "furthermor": 5, "below": 5, "inclus": 5, "stage": 5, "doesn": 5, "improv": 5, "explain": 5, "least": 5, "amount": 5, "stop": 5, "integ": 5, "cross": 5, "determin": 5, "fold": 5, "n": 5, "some_object": 5, "metaestim": 5, "multipl": 5, "In": 5, "final": 5, "averag": 5, "linearmodel": 5, "coef_": 5, "intercept_": 5, "howev": 5, "someth": 5, "els": 5, "arithmet": 5, "g": 5, "taken": 5, "everyth": 5, "inherit": 5, "extent": 5, "interchangibli": 5, "list_of_coef": 5, "additional_result": 5, "dure": 5, "need": 5, "case": 5, "list_of_dict": 5, "mean_additional_result": 5, "mean_coef": 5, "coeffici": 5, "were": 5, "nonzero": 5, "cv_error": 5, "error": 5, "here": 5, "stepwis": 5, "most": 5, "promis": 5, "candid": 5, "good": 5, "enough": 5, "outlin": 5, "analysi": 5, "research": 5, "von": 5, "storch": 5, "1999": 5, "intend": 5, "necessari": 5, "explaned_vari": 5, "list_of_param": 5, "accord": 5, "start": 5, "yhat": 5, "inact": 5, "uncertainti": 5, "deviat": 5, "lowest": 5, "abort": 5, "previou": 5, "row": 5, "length": 5, "exp_var": 5, "whose": 5, "add_result": 5, "linearcoefshandlermixin": 5, "ol": 5, "n_predictor": 5, "often": 5, "expand": 5, "them": 5, "wai": 5, "matrix": 5, "x_activ": 5, "more": 5, "abou": 5, "metadata": 5}, "objects": {"": [[5, 0, 0, "-", "pyESD"]], "pyESD": [[5, 0, 0, "-", "ESD_utils"], [5, 0, 0, "-", "MLR_model"], [5, 0, 0, "-", "Predictor_Base"], [5, 0, 0, "-", "Predictor_Generator"], [5, 0, 0, "-", "StationOperator"], [5, 0, 0, "-", "Weatherstation"], [5, 0, 0, "-", "dense_models"], [5, 0, 0, "-", "ensemble_models"], [5, 0, 0, "-", "feature_selection"], [5, 0, 0, "-", "metrics"], [5, 0, 0, "-", "models"], [5, 0, 0, "-", "plot"], [5, 0, 0, "-", "plot_utils"], [5, 0, 0, "-", "predictand"], [5, 0, 0, "-", "splitter"], [5, 0, 0, "-", "standardizer"], [5, 0, 0, "-", "teleconnections"]], "pyESD.ESD_utils": [[5, 1, 1, "", "ComputeStat"], [5, 2, 1, "", "Dataset"], [5, 2, 1, "", "MidpointNormalize"], [5, 1, 1, "", "StackArray"], [5, 1, 1, "", "StatTest"], [5, 1, 1, "", "_get_month"], [5, 1, 1, "", "extract_indices_around"], [5, 1, 1, "", "extract_region"], [5, 1, 1, "", "haversine"], [5, 1, 1, "", "levene_test"], [5, 1, 1, "", "load_all_stations"], [5, 1, 1, "", "load_csv"], [5, 1, 1, "", "load_pickle"], [5, 1, 1, "", "map_to_xarray"], [5, 1, 1, "", "plot_background"], [5, 1, 1, "", "plot_ks_stats"], [5, 1, 1, "", "ranksums_test"], [5, 1, 1, "", "store_csv"], [5, 1, 1, "", "store_pickle"]], "pyESD.ESD_utils.Dataset": [[5, 3, 1, "", "get"]], "pyESD.MLR_model": [[5, 2, 1, "", "BootstrappedForwardSelection"], [5, 2, 1, "", "BootstrappedRegression"], [5, 2, 1, "", "ForwardSelection"], [5, 2, 1, "", "MultipleLSRegression"], [5, 1, 1, "", "_get_active"]], "pyESD.MLR_model.BootstrappedRegression": [[5, 3, 1, "", "fit"], [5, 3, 1, "", "fit_predict"], [5, 3, 1, "", "predict"]], "pyESD.MLR_model.ForwardSelection": [[5, 3, 1, "", "average_additional_results"], [5, 3, 1, "", "average_coefs"], [5, 3, 1, "", "fit"], [5, 3, 1, "", "fit_active"], [5, 3, 1, "", "predict"], [5, 3, 1, "", "predict_active"], [5, 3, 1, "", "set_additional_results"]], "pyESD.MLR_model.MultipleLSRegression": [[5, 3, 1, "", "fit"], [5, 3, 1, "", "predict"], [5, 3, 1, "", "set_expand_coefs"]], "pyESD.Predictor_Base": [[5, 2, 1, "", "Predictor"]], "pyESD.Predictor_Base.Predictor": [[5, 3, 1, "", "fit"], [5, 3, 1, "", "get"], [5, 3, 1, "", "load"], [5, 3, 1, "", "plot"], [5, 3, 1, "", "save"]], "pyESD.Predictor_Generator": [[5, 2, 1, "", "RegionalAverage"]], "pyESD.StationOperator": [[5, 2, 1, "", "StationOperator"], [5, 1, 1, "", "load_station"]], "pyESD.StationOperator.StationOperator": [[5, 3, 1, "", "climate_score"], [5, 3, 1, "", "cross_validate_and_predict"], [5, 3, 1, "", "ensemble_transform"], [5, 3, 1, "", "evaluate"], [5, 3, 1, "", "fit"], [5, 3, 1, "", "fit_predictor"], [5, 3, 1, "", "get_explained_variance"], [5, 3, 1, "", "get_var"], [5, 3, 1, "", "predict"], [5, 3, 1, "", "predictor_correlation"], [5, 3, 1, "", "relative_predictor_importance"], [5, 3, 1, "", "save"], [5, 3, 1, "", "selected_names"], [5, 3, 1, "", "set_model"], [5, 3, 1, "", "set_predictors"], [5, 3, 1, "", "set_standardizer"], [5, 3, 1, "", "set_transform"], [5, 3, 1, "", "tree_based_feature_importance"], [5, 3, 1, "", "tree_based_feature_permutation_importance"]], "pyESD.Weatherstation": [[5, 1, 1, "", "read_station_csv"], [5, 1, 1, "", "read_weatherstationnames"], [5, 1, 1, "", "read_weatherstations"]], "pyESD.dense_models": [[5, 2, 1, "", "DeepLearningRegressor"]], "pyESD.dense_models.DeepLearningRegressor": [[5, 3, 1, "", "build_model"], [5, 3, 1, "", "compile_model"], [5, 3, 1, "", "convert_to_sklearn_regressor"], [5, 3, 1, "", "fit"], [5, 3, 1, "", "plot_network"], [5, 3, 1, "", "predict"]], "pyESD.ensemble_models": [[5, 2, 1, "", "EnsembleRegressor"]], "pyESD.ensemble_models.EnsembleRegressor": [[5, 3, 1, "", "cross_val_predict"], [5, 3, 1, "", "cross_val_score"], [5, 3, 1, "", "cross_validate"], [5, 3, 1, "", "fit"], [5, 3, 1, "", "get_params"], [5, 3, 1, "", "predict"], [5, 3, 1, "", "predict_average"], [5, 3, 1, "", "score"], [5, 3, 1, "", "transform"]], "pyESD.feature_selection": [[5, 2, 1, "", "RecursiveFeatureElimination"], [5, 2, 1, "", "SequentialFeatureSelection"], [5, 2, 1, "", "TreeBasedSelection"]], "pyESD.feature_selection.RecursiveFeatureElimination": [[5, 3, 1, "", "cv_test_score"], [5, 3, 1, "", "fit"], [5, 3, 1, "", "print_selected_features"], [5, 3, 1, "", "score"], [5, 3, 1, "", "transform"]], "pyESD.feature_selection.SequentialFeatureSelection": [[5, 3, 1, "", "fit"], [5, 3, 1, "", "print_selected_features"], [5, 3, 1, "", "score"], [5, 3, 1, "", "transform"]], "pyESD.feature_selection.TreeBasedSelection": [[5, 3, 1, "", "feature_importance"], [5, 3, 1, "", "fit"], [5, 3, 1, "", "permutation_importance_"], [5, 3, 1, "", "print_selected_features"], [5, 3, 1, "", "transform"]], "pyESD.metrics": [[5, 2, 1, "", "Evaluate"]], "pyESD.metrics.Evaluate": [[5, 3, 1, "", "MAE"], [5, 3, 1, "", "MSE"], [5, 3, 1, "", "NSE"], [5, 3, 1, "", "R2_score"], [5, 3, 1, "", "RMSE"], [5, 3, 1, "", "adjusted_r2"], [5, 3, 1, "", "explained_variance"], [5, 3, 1, "", "max_error"]], "pyESD.models": [[5, 2, 1, "", "HyperparameterOptimize"], [5, 2, 1, "", "MetaAttributes"], [5, 2, 1, "", "Regressors"]], "pyESD.models.HyperparameterOptimize": [[5, 3, 1, "", "best_estimator"], [5, 3, 1, "", "cross_val_predict"], [5, 3, 1, "", "cross_val_score"], [5, 3, 1, "", "cross_validate"], [5, 3, 1, "", "fit"], [5, 3, 1, "", "predict_log_proba"], [5, 3, 1, "", "score"], [5, 3, 1, "", "transform"]], "pyESD.models.MetaAttributes": [[5, 3, 1, "", "alpha"], [5, 3, 1, "", "best_estimator"], [5, 3, 1, "", "best_params"], [5, 3, 1, "", "coef"], [5, 3, 1, "", "get_params"], [5, 3, 1, "", "intercept"], [5, 3, 1, "", "set_params"]], "pyESD.models.Regressors": [[5, 3, 1, "", "cross_val_predict"], [5, 3, 1, "", "cross_val_score"], [5, 3, 1, "", "cross_validate"], [5, 3, 1, "", "fit"], [5, 3, 1, "", "predict"], [5, 3, 1, "", "score"], [5, 3, 1, "", "set_model"]], "pyESD.plot": [[5, 1, 1, "", "barplot"], [5, 1, 1, "", "boxplot"], [5, 1, 1, "", "correlation_heatmap"], [5, 1, 1, "", "heatmaps"], [5, 1, 1, "", "lineplot"], [5, 1, 1, "", "plot_monthly_mean"], [5, 1, 1, "", "plot_projection_comparison"], [5, 1, 1, "", "plot_time_series"], [5, 1, 1, "", "scatterplot"]], "pyESD.plot_utils": [[5, 1, 1, "", "apply_style"], [5, 1, 1, "", "barplot_data"], [5, 1, 1, "", "boxplot_data"], [5, 1, 1, "", "correlation_data"], [5, 1, 1, "", "count_predictors"], [5, 1, 1, "", "extract_comparison_data_means"], [5, 1, 1, "", "extract_time_series"], [5, 1, 1, "", "monthly_mean"], [5, 1, 1, "", "prediction_example_data"], [5, 1, 1, "", "resample_monthly"], [5, 1, 1, "", "resample_seasonally"], [5, 1, 1, "", "seasonal_mean"]], "pyESD.predictand": [[5, 2, 1, "", "PredictandTimeseries"]], "pyESD.predictand.PredictandTimeseries": [[5, 3, 1, "", "climate_score"], [5, 3, 1, "", "cross_validate_and_predict"], [5, 3, 1, "", "ensemble_transform"], [5, 3, 1, "", "evaluate"], [5, 3, 1, "", "fit"], [5, 3, 1, "", "fit_predictor"], [5, 3, 1, "", "get"], [5, 3, 1, "", "predict"], [5, 3, 1, "", "predictor_correlation"], [5, 3, 1, "", "relative_predictor_importance"], [5, 3, 1, "", "selected_names"], [5, 3, 1, "", "set_model"], [5, 3, 1, "", "set_predictors"], [5, 3, 1, "", "set_standardizer"], [5, 3, 1, "", "set_transform"], [5, 3, 1, "", "tree_based_feature_importance"], [5, 3, 1, "", "tree_based_feature_permutation_importance"]], "pyESD.splitter": [[5, 2, 1, "", "MonthlyBooststrapper"], [5, 2, 1, "", "Splitter"], [5, 2, 1, "", "YearlyBootstrapper"]], "pyESD.splitter.MonthlyBooststrapper": [[5, 3, 1, "", "split"]], "pyESD.splitter.Splitter": [[5, 3, 1, "", "get_n_splits"], [5, 3, 1, "", "split"]], "pyESD.splitter.YearlyBootstrapper": [[5, 3, 1, "", "split"]], "pyESD.standardizer": [[5, 2, 1, "", "MonthlyStandardizer"], [5, 2, 1, "", "NoStandardizer"], [5, 2, 1, "", "PCAScaling"], [5, 2, 1, "", "StandardScaling"], [5, 1, 1, "", "add_seasonal_cycle"], [5, 1, 1, "", "get_annual_mean_cycle"], [5, 1, 1, "", "get_mean_prediction"], [5, 1, 1, "", "remove_seasonal_cycle"]], "pyESD.standardizer.MonthlyStandardizer": [[5, 3, 1, "", "fit"], [5, 3, 1, "", "inverse_transform"], [5, 3, 1, "", "transform"]], "pyESD.standardizer.NoStandardizer": [[5, 3, 1, "", "fit"], [5, 3, 1, "", "inverse_transform"], [5, 3, 1, "", "transform"]], "pyESD.standardizer.PCAScaling": [[5, 3, 1, "", "fit"], [5, 3, 1, "", "fit_transform"], [5, 3, 1, "", "inverse_transform"], [5, 3, 1, "", "transform"]], "pyESD.standardizer.StandardScaling": [[5, 3, 1, "", "fit"], [5, 3, 1, "", "inverse_transform"], [5, 3, 1, "", "transform"]], "pyESD.teleconnections": [[5, 2, 1, "", "EA"], [5, 2, 1, "", "EAWR"], [5, 2, 1, "", "MEI"], [5, 2, 1, "", "NAO"], [5, 2, 1, "", "SCAN"], [5, 1, 1, "", "_get_month"], [5, 1, 1, "", "eof_analysis"], [5, 1, 1, "", "extract_region"]], "pyESD.teleconnections.EA": [[5, 3, 1, "", "plot_cov_matrix"]], "pyESD.teleconnections.EAWR": [[5, 3, 1, "", "plot_cov_matrix"]], "pyESD.teleconnections.NAO": [[5, 3, 1, "", "plot_cov_matrix"]], "pyESD.teleconnections.SCAN": [[5, 3, 1, "", "plot_cov_matrix"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"]}, "titleterms": {"practic": 0, "exampl": 0, "python": 1, "framwork": 1, "empir": 1, "statist": 1, "downscal": 1, "document": 1, "get": 1, "start": 1, "licens": 1, "indic": 1, "tabl": 1, "instal": 2, "from": 2, "pypi": 2, "github": 2, "depend": 2, "method": 3, "model": [3, 5], "framework": 3, "api": 4, "refer": 4, "pyesd": 5, "packag": 5, "submodul": 5, "esd_util": 5, "modul": 5, "predictor_bas": 5, "predictor_gener": 5, "stationoper": 5, "weatherstationpreprocess": 5, "dense_model": 5, "ensemble_model": 5, "feature_select": 5, "metric": 5, "plot": 5, "plot_util": 5, "predictand": 5, "splitter": 5, "standard": 5, "teleconnect": 5, "data_preprocessing_util": 5, "mlr": 5, "content": 5}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"Practical examples": [[0, "practical-examples"]], "Python framwork for Empirical Statistical Downscaling": [[1, "python-framwork-for-empirical-statistical-downscaling"]], "Documentation": [[1, "documentation"]], "Getting Started:": [[1, null]], "License": [[1, "license"]], "Indices and tables": [[1, "indices-and-tables"]], "Installation": [[2, "installation"]], "Install from PyPI": [[2, "install-from-pypi"]], "Install from Github": [[2, "install-from-github"]], "Dependencies": [[2, "dependencies"]], "Methods": [[3, "methods"]], "Modelling framework": [[3, "modelling-framework"]], "API Reference": [[4, "api-reference"]], "pyESD package": [[5, "pyesd-package"]], "Submodules": [[5, "submodules"]], "pyESD.ESD_utils module": [[5, "module-pyESD.ESD_utils"]], "pyESD.Predictor_Base module": [[5, "module-pyESD.Predictor_Base"]], "pyESD.Predictor_Generator module": [[5, "module-pyESD.Predictor_Generator"]], "pyESD.StationOperator module": [[5, "module-pyESD.StationOperator"]], "pyESD.WeatherstationPreprocessing module": [[5, "module-pyESD.Weatherstation"]], "pyESD.dense_models module": [[5, "module-pyESD.dense_models"]], "pyESD.ensemble_models module": [[5, "module-pyESD.ensemble_models"]], "pyESD.feature_selection module": [[5, "module-pyESD.feature_selection"]], "pyESD.metrics module": [[5, "module-pyESD.metrics"]], "pyESD.models module": [[5, "module-pyESD.models"]], "pyESD.plot module": [[5, "module-pyESD.plot"]], "pyESD.plot_utils module": [[5, "module-pyESD.plot_utils"]], "pyESD.predictand module": [[5, "module-pyESD.predictand"]], "pyESD.splitter module": [[5, "module-pyESD.splitter"]], "pyESD.standardizer module": [[5, "module-pyESD.standardizer"]], "pyESD.teleconnections module": [[5, "module-pyESD.teleconnections"]], "pyESD.data_preprocessing_utils module": [[5, "pyesd-data-preprocessing-utils-module"]], "pyESD.MLR module": [[5, "module-pyESD.MLR_model"]], "Module contents": [[5, "module-pyESD"]]}, "indexentries": {"bootstrappedforwardselection (class in pyesd.mlr_model)": [[5, "pyESD.MLR_model.BootstrappedForwardSelection"]], "bootstrappedregression (class in pyesd.mlr_model)": [[5, "pyESD.MLR_model.BootstrappedRegression"]], "computestat() (in module pyesd.esd_utils)": [[5, "pyESD.ESD_utils.ComputeStat"]], "dataset (class in pyesd.esd_utils)": [[5, "pyESD.ESD_utils.Dataset"]], "deeplearningregressor (class in pyesd.dense_models)": [[5, "pyESD.dense_models.DeepLearningRegressor"]], "ea (class in pyesd.teleconnections)": [[5, "pyESD.teleconnections.EA"]], "eawr (class in pyesd.teleconnections)": [[5, "pyESD.teleconnections.EAWR"]], "ensembleregressor (class in pyesd.ensemble_models)": [[5, "pyESD.ensemble_models.EnsembleRegressor"]], "evaluate (class in pyesd.metrics)": [[5, "pyESD.metrics.Evaluate"]], "forwardselection (class in pyesd.mlr_model)": [[5, "pyESD.MLR_model.ForwardSelection"]], "hyperparameteroptimize (class in pyesd.models)": [[5, "pyESD.models.HyperparameterOptimize"]], "mae() (pyesd.metrics.evaluate method)": [[5, "pyESD.metrics.Evaluate.MAE"]], "mei (class in pyesd.teleconnections)": [[5, "pyESD.teleconnections.MEI"]], "mse() (pyesd.metrics.evaluate method)": [[5, "pyESD.metrics.Evaluate.MSE"]], "metaattributes (class in pyesd.models)": [[5, "pyESD.models.MetaAttributes"]], "midpointnormalize (class in pyesd.esd_utils)": [[5, "pyESD.ESD_utils.MidpointNormalize"]], "monthlybooststrapper (class in pyesd.splitter)": [[5, "pyESD.splitter.MonthlyBooststrapper"]], "monthlystandardizer (class in pyesd.standardizer)": [[5, "pyESD.standardizer.MonthlyStandardizer"]], "multiplelsregression (class in pyesd.mlr_model)": [[5, "pyESD.MLR_model.MultipleLSRegression"]], "nao (class in pyesd.teleconnections)": [[5, "pyESD.teleconnections.NAO"]], "nse() (pyesd.metrics.evaluate method)": [[5, "pyESD.metrics.Evaluate.NSE"]], "nostandardizer (class in pyesd.standardizer)": [[5, "pyESD.standardizer.NoStandardizer"]], "pcascaling (class in pyesd.standardizer)": [[5, "pyESD.standardizer.PCAScaling"]], "predictandtimeseries (class in pyesd.predictand)": [[5, "pyESD.predictand.PredictandTimeseries"]], "predictor (class in pyesd.predictor_base)": [[5, "pyESD.Predictor_Base.Predictor"]], "r2_score() (pyesd.metrics.evaluate method)": [[5, "pyESD.metrics.Evaluate.R2_score"]], "rmse() (pyesd.metrics.evaluate method)": [[5, "pyESD.metrics.Evaluate.RMSE"]], "recursivefeatureelimination (class in pyesd.feature_selection)": [[5, "pyESD.feature_selection.RecursiveFeatureElimination"]], "regionalaverage (class in pyesd.predictor_generator)": [[5, "pyESD.Predictor_Generator.RegionalAverage"]], "regressors (class in pyesd.models)": [[5, "pyESD.models.Regressors"]], "scan (class in pyesd.teleconnections)": [[5, "pyESD.teleconnections.SCAN"]], "sequentialfeatureselection (class in pyesd.feature_selection)": [[5, "pyESD.feature_selection.SequentialFeatureSelection"]], "splitter (class in pyesd.splitter)": [[5, "pyESD.splitter.Splitter"]], "stackarray() (in module pyesd.esd_utils)": [[5, "pyESD.ESD_utils.StackArray"]], "standardscaling (class in pyesd.standardizer)": [[5, "pyESD.standardizer.StandardScaling"]], "stattest() (in module pyesd.esd_utils)": [[5, "pyESD.ESD_utils.StatTest"]], "stationoperator (class in pyesd.stationoperator)": [[5, "pyESD.StationOperator.StationOperator"]], "treebasedselection (class in pyesd.feature_selection)": [[5, "pyESD.feature_selection.TreeBasedSelection"]], "yearlybootstrapper (class in pyesd.splitter)": [[5, "pyESD.splitter.YearlyBootstrapper"]], "_get_active() (in module pyesd.mlr_model)": [[5, "pyESD.MLR_model._get_active"]], "_get_month() (in module pyesd.esd_utils)": [[5, "pyESD.ESD_utils._get_month"]], "_get_month() (in module pyesd.teleconnections)": [[5, "pyESD.teleconnections._get_month"]], "add_seasonal_cycle() (in module pyesd.standardizer)": [[5, "pyESD.standardizer.add_seasonal_cycle"]], "adjusted_r2() (pyesd.metrics.evaluate method)": [[5, "pyESD.metrics.Evaluate.adjusted_r2"]], "alpha() (pyesd.models.metaattributes method)": [[5, "pyESD.models.MetaAttributes.alpha"]], "apply_style() (in module pyesd.plot_utils)": [[5, "pyESD.plot_utils.apply_style"]], "average_additional_results() (pyesd.mlr_model.forwardselection method)": [[5, "pyESD.MLR_model.ForwardSelection.average_additional_results"]], "average_coefs() (pyesd.mlr_model.forwardselection method)": [[5, "pyESD.MLR_model.ForwardSelection.average_coefs"]], "barplot() (in module pyesd.plot)": [[5, "pyESD.plot.barplot"]], "barplot_data() (in module pyesd.plot_utils)": [[5, "pyESD.plot_utils.barplot_data"]], "best_estimator() (pyesd.models.hyperparameteroptimize method)": [[5, "pyESD.models.HyperparameterOptimize.best_estimator"]], "best_estimator() (pyesd.models.metaattributes method)": [[5, "pyESD.models.MetaAttributes.best_estimator"]], "best_params() (pyesd.models.metaattributes method)": [[5, "pyESD.models.MetaAttributes.best_params"]], "boxplot() (in module pyesd.plot)": [[5, "pyESD.plot.boxplot"]], "boxplot_data() (in module pyesd.plot_utils)": [[5, "pyESD.plot_utils.boxplot_data"]], "build_model() (pyesd.dense_models.deeplearningregressor method)": [[5, "pyESD.dense_models.DeepLearningRegressor.build_model"]], "climate_score() (pyesd.stationoperator.stationoperator method)": [[5, "pyESD.StationOperator.StationOperator.climate_score"]], "climate_score() (pyesd.predictand.predictandtimeseries method)": [[5, "pyESD.predictand.PredictandTimeseries.climate_score"]], "coef() (pyesd.models.metaattributes method)": [[5, "pyESD.models.MetaAttributes.coef"]], "compile_model() (pyesd.dense_models.deeplearningregressor method)": [[5, "pyESD.dense_models.DeepLearningRegressor.compile_model"]], "convert_to_sklearn_regressor() (pyesd.dense_models.deeplearningregressor method)": [[5, "pyESD.dense_models.DeepLearningRegressor.convert_to_sklearn_regressor"]], "correlation_data() (in module pyesd.plot_utils)": [[5, "pyESD.plot_utils.correlation_data"]], "correlation_heatmap() (in module pyesd.plot)": [[5, "pyESD.plot.correlation_heatmap"]], "count_predictors() (in module pyesd.plot_utils)": [[5, "pyESD.plot_utils.count_predictors"]], "cross_val_predict() (pyesd.ensemble_models.ensembleregressor method)": [[5, "pyESD.ensemble_models.EnsembleRegressor.cross_val_predict"]], "cross_val_predict() (pyesd.models.hyperparameteroptimize method)": [[5, "pyESD.models.HyperparameterOptimize.cross_val_predict"]], "cross_val_predict() (pyesd.models.regressors method)": [[5, "pyESD.models.Regressors.cross_val_predict"]], "cross_val_score() (pyesd.ensemble_models.ensembleregressor method)": [[5, "pyESD.ensemble_models.EnsembleRegressor.cross_val_score"]], "cross_val_score() (pyesd.models.hyperparameteroptimize method)": [[5, "pyESD.models.HyperparameterOptimize.cross_val_score"]], "cross_val_score() (pyesd.models.regressors method)": [[5, "pyESD.models.Regressors.cross_val_score"]], "cross_validate() (pyesd.ensemble_models.ensembleregressor method)": [[5, "pyESD.ensemble_models.EnsembleRegressor.cross_validate"]], "cross_validate() (pyesd.models.hyperparameteroptimize method)": [[5, "pyESD.models.HyperparameterOptimize.cross_validate"]], "cross_validate() (pyesd.models.regressors method)": [[5, "pyESD.models.Regressors.cross_validate"]], "cross_validate_and_predict() (pyesd.stationoperator.stationoperator method)": [[5, "pyESD.StationOperator.StationOperator.cross_validate_and_predict"]], "cross_validate_and_predict() (pyesd.predictand.predictandtimeseries method)": [[5, "pyESD.predictand.PredictandTimeseries.cross_validate_and_predict"]], "cv_test_score() (pyesd.feature_selection.recursivefeatureelimination method)": [[5, "pyESD.feature_selection.RecursiveFeatureElimination.cv_test_score"]], "ensemble_transform() (pyesd.stationoperator.stationoperator method)": [[5, "pyESD.StationOperator.StationOperator.ensemble_transform"]], "ensemble_transform() (pyesd.predictand.predictandtimeseries method)": [[5, "pyESD.predictand.PredictandTimeseries.ensemble_transform"]], "eof_analysis() (in module pyesd.teleconnections)": [[5, "pyESD.teleconnections.eof_analysis"]], "evaluate() (pyesd.stationoperator.stationoperator method)": [[5, "pyESD.StationOperator.StationOperator.evaluate"]], "evaluate() (pyesd.predictand.predictandtimeseries method)": [[5, "pyESD.predictand.PredictandTimeseries.evaluate"]], "explained_variance() (pyesd.metrics.evaluate method)": [[5, "pyESD.metrics.Evaluate.explained_variance"]], "extract_comparison_data_means() (in module pyesd.plot_utils)": [[5, "pyESD.plot_utils.extract_comparison_data_means"]], "extract_indices_around() (in module pyesd.esd_utils)": [[5, "pyESD.ESD_utils.extract_indices_around"]], "extract_region() (in module pyesd.esd_utils)": [[5, "pyESD.ESD_utils.extract_region"]], "extract_region() (in module pyesd.teleconnections)": [[5, "pyESD.teleconnections.extract_region"]], "extract_time_series() (in module pyesd.plot_utils)": [[5, "pyESD.plot_utils.extract_time_series"]], "feature_importance() (pyesd.feature_selection.treebasedselection method)": [[5, "pyESD.feature_selection.TreeBasedSelection.feature_importance"]], "fit() (pyesd.mlr_model.bootstrappedregression method)": [[5, "pyESD.MLR_model.BootstrappedRegression.fit"]], "fit() (pyesd.mlr_model.forwardselection method)": [[5, "pyESD.MLR_model.ForwardSelection.fit"]], "fit() (pyesd.mlr_model.multiplelsregression method)": [[5, "pyESD.MLR_model.MultipleLSRegression.fit"]], "fit() (pyesd.predictor_base.predictor method)": [[5, "pyESD.Predictor_Base.Predictor.fit"]], "fit() (pyesd.stationoperator.stationoperator method)": [[5, "pyESD.StationOperator.StationOperator.fit"]], "fit() (pyesd.dense_models.deeplearningregressor method)": [[5, "pyESD.dense_models.DeepLearningRegressor.fit"]], "fit() (pyesd.ensemble_models.ensembleregressor method)": [[5, "pyESD.ensemble_models.EnsembleRegressor.fit"]], "fit() (pyesd.feature_selection.recursivefeatureelimination method)": [[5, "pyESD.feature_selection.RecursiveFeatureElimination.fit"]], "fit() (pyesd.feature_selection.sequentialfeatureselection method)": [[5, "pyESD.feature_selection.SequentialFeatureSelection.fit"]], "fit() (pyesd.feature_selection.treebasedselection method)": [[5, "pyESD.feature_selection.TreeBasedSelection.fit"]], "fit() (pyesd.models.hyperparameteroptimize method)": [[5, "pyESD.models.HyperparameterOptimize.fit"]], "fit() (pyesd.models.regressors method)": [[5, "pyESD.models.Regressors.fit"]], "fit() (pyesd.predictand.predictandtimeseries method)": [[5, "pyESD.predictand.PredictandTimeseries.fit"]], "fit() (pyesd.standardizer.monthlystandardizer method)": [[5, "pyESD.standardizer.MonthlyStandardizer.fit"]], "fit() (pyesd.standardizer.nostandardizer method)": [[5, "pyESD.standardizer.NoStandardizer.fit"]], "fit() (pyesd.standardizer.pcascaling method)": [[5, "pyESD.standardizer.PCAScaling.fit"]], "fit() (pyesd.standardizer.standardscaling method)": [[5, "pyESD.standardizer.StandardScaling.fit"]], "fit_active() (pyesd.mlr_model.forwardselection method)": [[5, "pyESD.MLR_model.ForwardSelection.fit_active"]], "fit_predict() (pyesd.mlr_model.bootstrappedregression method)": [[5, "pyESD.MLR_model.BootstrappedRegression.fit_predict"]], "fit_predictor() (pyesd.stationoperator.stationoperator method)": [[5, "pyESD.StationOperator.StationOperator.fit_predictor"]], "fit_predictor() (pyesd.predictand.predictandtimeseries method)": [[5, "pyESD.predictand.PredictandTimeseries.fit_predictor"]], "fit_transform() (pyesd.standardizer.pcascaling method)": [[5, "pyESD.standardizer.PCAScaling.fit_transform"]], "get() (pyesd.esd_utils.dataset method)": [[5, "pyESD.ESD_utils.Dataset.get"]], "get() (pyesd.predictor_base.predictor method)": [[5, "pyESD.Predictor_Base.Predictor.get"]], "get() (pyesd.predictand.predictandtimeseries method)": [[5, "pyESD.predictand.PredictandTimeseries.get"]], "get_annual_mean_cycle() (in module pyesd.standardizer)": [[5, "pyESD.standardizer.get_annual_mean_cycle"]], "get_explained_variance() (pyesd.stationoperator.stationoperator method)": [[5, "pyESD.StationOperator.StationOperator.get_explained_variance"]], "get_mean_prediction() (in module pyesd.standardizer)": [[5, "pyESD.standardizer.get_mean_prediction"]], "get_n_splits() (pyesd.splitter.splitter method)": [[5, "pyESD.splitter.Splitter.get_n_splits"]], "get_params() (pyesd.ensemble_models.ensembleregressor method)": [[5, "pyESD.ensemble_models.EnsembleRegressor.get_params"]], "get_params() (pyesd.models.metaattributes method)": [[5, "pyESD.models.MetaAttributes.get_params"]], "get_var() (pyesd.stationoperator.stationoperator method)": [[5, "pyESD.StationOperator.StationOperator.get_var"]], "haversine() (in module pyesd.esd_utils)": [[5, "pyESD.ESD_utils.haversine"]], "heatmaps() (in module pyesd.plot)": [[5, "pyESD.plot.heatmaps"]], "intercept() (pyesd.models.metaattributes method)": [[5, "pyESD.models.MetaAttributes.intercept"]], "inverse_transform() (pyesd.standardizer.monthlystandardizer method)": [[5, "pyESD.standardizer.MonthlyStandardizer.inverse_transform"]], "inverse_transform() (pyesd.standardizer.nostandardizer method)": [[5, "pyESD.standardizer.NoStandardizer.inverse_transform"]], "inverse_transform() (pyesd.standardizer.pcascaling method)": [[5, "pyESD.standardizer.PCAScaling.inverse_transform"]], "inverse_transform() (pyesd.standardizer.standardscaling method)": [[5, "pyESD.standardizer.StandardScaling.inverse_transform"]], "levene_test() (in module pyesd.esd_utils)": [[5, "pyESD.ESD_utils.levene_test"]], "lineplot() (in module pyesd.plot)": [[5, "pyESD.plot.lineplot"]], "load() (pyesd.predictor_base.predictor method)": [[5, "pyESD.Predictor_Base.Predictor.load"]], "load_all_stations() (in module pyesd.esd_utils)": [[5, "pyESD.ESD_utils.load_all_stations"]], "load_csv() (in module pyesd.esd_utils)": [[5, "pyESD.ESD_utils.load_csv"]], "load_pickle() (in module pyesd.esd_utils)": [[5, "pyESD.ESD_utils.load_pickle"]], "load_station() (in module pyesd.stationoperator)": [[5, "pyESD.StationOperator.load_station"]], "map_to_xarray() (in module pyesd.esd_utils)": [[5, "pyESD.ESD_utils.map_to_xarray"]], "max_error() (pyesd.metrics.evaluate method)": [[5, "pyESD.metrics.Evaluate.max_error"]], "module": [[5, "module-pyESD"], [5, "module-pyESD.ESD_utils"], [5, "module-pyESD.MLR_model"], [5, "module-pyESD.Predictor_Base"], [5, "module-pyESD.Predictor_Generator"], [5, "module-pyESD.StationOperator"], [5, "module-pyESD.Weatherstation"], [5, "module-pyESD.dense_models"], [5, "module-pyESD.ensemble_models"], [5, "module-pyESD.feature_selection"], [5, "module-pyESD.metrics"], [5, "module-pyESD.models"], [5, "module-pyESD.plot"], [5, "module-pyESD.plot_utils"], [5, "module-pyESD.predictand"], [5, "module-pyESD.splitter"], [5, "module-pyESD.standardizer"], [5, "module-pyESD.teleconnections"]], "monthly_mean() (in module pyesd.plot_utils)": [[5, "pyESD.plot_utils.monthly_mean"]], "permutation_importance_() (pyesd.feature_selection.treebasedselection method)": [[5, "pyESD.feature_selection.TreeBasedSelection.permutation_importance_"]], "plot() (pyesd.predictor_base.predictor method)": [[5, "pyESD.Predictor_Base.Predictor.plot"]], "plot_background() (in module pyesd.esd_utils)": [[5, "pyESD.ESD_utils.plot_background"]], "plot_cov_matrix() (pyesd.teleconnections.ea method)": [[5, "pyESD.teleconnections.EA.plot_cov_matrix"]], "plot_cov_matrix() (pyesd.teleconnections.eawr method)": [[5, "pyESD.teleconnections.EAWR.plot_cov_matrix"]], "plot_cov_matrix() (pyesd.teleconnections.nao method)": [[5, "pyESD.teleconnections.NAO.plot_cov_matrix"]], "plot_cov_matrix() (pyesd.teleconnections.scan method)": [[5, "pyESD.teleconnections.SCAN.plot_cov_matrix"]], "plot_ks_stats() (in module pyesd.esd_utils)": [[5, "pyESD.ESD_utils.plot_ks_stats"]], "plot_monthly_mean() (in module pyesd.plot)": [[5, "pyESD.plot.plot_monthly_mean"]], "plot_network() (pyesd.dense_models.deeplearningregressor method)": [[5, "pyESD.dense_models.DeepLearningRegressor.plot_network"]], "plot_projection_comparison() (in module pyesd.plot)": [[5, "pyESD.plot.plot_projection_comparison"]], "plot_time_series() (in module pyesd.plot)": [[5, "pyESD.plot.plot_time_series"]], "predict() (pyesd.mlr_model.bootstrappedregression method)": [[5, "pyESD.MLR_model.BootstrappedRegression.predict"]], "predict() (pyesd.mlr_model.forwardselection method)": [[5, "pyESD.MLR_model.ForwardSelection.predict"]], "predict() (pyesd.mlr_model.multiplelsregression method)": [[5, "pyESD.MLR_model.MultipleLSRegression.predict"]], "predict() (pyesd.stationoperator.stationoperator method)": [[5, "pyESD.StationOperator.StationOperator.predict"]], "predict() (pyesd.dense_models.deeplearningregressor method)": [[5, "pyESD.dense_models.DeepLearningRegressor.predict"]], "predict() (pyesd.ensemble_models.ensembleregressor method)": [[5, "pyESD.ensemble_models.EnsembleRegressor.predict"]], "predict() (pyesd.models.regressors method)": [[5, "pyESD.models.Regressors.predict"]], "predict() (pyesd.predictand.predictandtimeseries method)": [[5, "pyESD.predictand.PredictandTimeseries.predict"]], "predict_active() (pyesd.mlr_model.forwardselection method)": [[5, "pyESD.MLR_model.ForwardSelection.predict_active"]], "predict_average() (pyesd.ensemble_models.ensembleregressor method)": [[5, "pyESD.ensemble_models.EnsembleRegressor.predict_average"]], "predict_log_proba() (pyesd.models.hyperparameteroptimize method)": [[5, "pyESD.models.HyperparameterOptimize.predict_log_proba"]], "prediction_example_data() (in module pyesd.plot_utils)": [[5, "pyESD.plot_utils.prediction_example_data"]], "predictor_correlation() (pyesd.stationoperator.stationoperator method)": [[5, "pyESD.StationOperator.StationOperator.predictor_correlation"]], "predictor_correlation() (pyesd.predictand.predictandtimeseries method)": [[5, "pyESD.predictand.PredictandTimeseries.predictor_correlation"]], "print_selected_features() (pyesd.feature_selection.recursivefeatureelimination method)": [[5, "pyESD.feature_selection.RecursiveFeatureElimination.print_selected_features"]], "print_selected_features() (pyesd.feature_selection.sequentialfeatureselection method)": [[5, "pyESD.feature_selection.SequentialFeatureSelection.print_selected_features"]], "print_selected_features() (pyesd.feature_selection.treebasedselection method)": [[5, "pyESD.feature_selection.TreeBasedSelection.print_selected_features"]], "pyesd": [[5, "module-pyESD"]], "pyesd.esd_utils": [[5, "module-pyESD.ESD_utils"]], "pyesd.mlr_model": [[5, "module-pyESD.MLR_model"]], "pyesd.predictor_base": [[5, "module-pyESD.Predictor_Base"]], "pyesd.predictor_generator": [[5, "module-pyESD.Predictor_Generator"]], "pyesd.stationoperator": [[5, "module-pyESD.StationOperator"]], "pyesd.weatherstation": [[5, "module-pyESD.Weatherstation"]], "pyesd.dense_models": [[5, "module-pyESD.dense_models"]], "pyesd.ensemble_models": [[5, "module-pyESD.ensemble_models"]], "pyesd.feature_selection": [[5, "module-pyESD.feature_selection"]], "pyesd.metrics": [[5, "module-pyESD.metrics"]], "pyesd.models": [[5, "module-pyESD.models"]], "pyesd.plot": [[5, "module-pyESD.plot"]], "pyesd.plot_utils": [[5, "module-pyESD.plot_utils"]], "pyesd.predictand": [[5, "module-pyESD.predictand"]], "pyesd.splitter": [[5, "module-pyESD.splitter"]], "pyesd.standardizer": [[5, "module-pyESD.standardizer"]], "pyesd.teleconnections": [[5, "module-pyESD.teleconnections"]], "ranksums_test() (in module pyesd.esd_utils)": [[5, "pyESD.ESD_utils.ranksums_test"]], "read_station_csv() (in module pyesd.weatherstation)": [[5, "pyESD.Weatherstation.read_station_csv"]], "read_weatherstationnames() (in module pyesd.weatherstation)": [[5, "pyESD.Weatherstation.read_weatherstationnames"]], "read_weatherstations() (in module pyesd.weatherstation)": [[5, "pyESD.Weatherstation.read_weatherstations"]], "relative_predictor_importance() (pyesd.stationoperator.stationoperator method)": [[5, "pyESD.StationOperator.StationOperator.relative_predictor_importance"]], "relative_predictor_importance() (pyesd.predictand.predictandtimeseries method)": [[5, "pyESD.predictand.PredictandTimeseries.relative_predictor_importance"]], "remove_seasonal_cycle() (in module pyesd.standardizer)": [[5, "pyESD.standardizer.remove_seasonal_cycle"]], "resample_monthly() (in module pyesd.plot_utils)": [[5, "pyESD.plot_utils.resample_monthly"]], "resample_seasonally() (in module pyesd.plot_utils)": [[5, "pyESD.plot_utils.resample_seasonally"]], "save() (pyesd.predictor_base.predictor method)": [[5, "pyESD.Predictor_Base.Predictor.save"]], "save() (pyesd.stationoperator.stationoperator method)": [[5, "pyESD.StationOperator.StationOperator.save"]], "scatterplot() (in module pyesd.plot)": [[5, "pyESD.plot.scatterplot"]], "score() (pyesd.ensemble_models.ensembleregressor method)": [[5, "pyESD.ensemble_models.EnsembleRegressor.score"]], "score() (pyesd.feature_selection.recursivefeatureelimination method)": [[5, "pyESD.feature_selection.RecursiveFeatureElimination.score"]], "score() (pyesd.feature_selection.sequentialfeatureselection method)": [[5, "pyESD.feature_selection.SequentialFeatureSelection.score"]], "score() (pyesd.models.hyperparameteroptimize method)": [[5, "pyESD.models.HyperparameterOptimize.score"]], "score() (pyesd.models.regressors method)": [[5, "pyESD.models.Regressors.score"]], "seasonal_mean() (in module pyesd.plot_utils)": [[5, "pyESD.plot_utils.seasonal_mean"]], "selected_names() (pyesd.stationoperator.stationoperator method)": [[5, "pyESD.StationOperator.StationOperator.selected_names"]], "selected_names() (pyesd.predictand.predictandtimeseries method)": [[5, "pyESD.predictand.PredictandTimeseries.selected_names"]], "set_additional_results() (pyesd.mlr_model.forwardselection method)": [[5, "pyESD.MLR_model.ForwardSelection.set_additional_results"]], "set_expand_coefs() (pyesd.mlr_model.multiplelsregression method)": [[5, "pyESD.MLR_model.MultipleLSRegression.set_expand_coefs"]], "set_model() (pyesd.stationoperator.stationoperator method)": [[5, "pyESD.StationOperator.StationOperator.set_model"]], "set_model() (pyesd.models.regressors method)": [[5, "pyESD.models.Regressors.set_model"]], "set_model() (pyesd.predictand.predictandtimeseries method)": [[5, "pyESD.predictand.PredictandTimeseries.set_model"]], "set_params() (pyesd.models.metaattributes method)": [[5, "pyESD.models.MetaAttributes.set_params"]], "set_predictors() (pyesd.stationoperator.stationoperator method)": [[5, "pyESD.StationOperator.StationOperator.set_predictors"]], "set_predictors() (pyesd.predictand.predictandtimeseries method)": [[5, "pyESD.predictand.PredictandTimeseries.set_predictors"]], "set_standardizer() (pyesd.stationoperator.stationoperator method)": [[5, "pyESD.StationOperator.StationOperator.set_standardizer"]], "set_standardizer() (pyesd.predictand.predictandtimeseries method)": [[5, "pyESD.predictand.PredictandTimeseries.set_standardizer"]], "set_transform() (pyesd.stationoperator.stationoperator method)": [[5, "pyESD.StationOperator.StationOperator.set_transform"]], "set_transform() (pyesd.predictand.predictandtimeseries method)": [[5, "pyESD.predictand.PredictandTimeseries.set_transform"]], "split() (pyesd.splitter.monthlybooststrapper method)": [[5, "pyESD.splitter.MonthlyBooststrapper.split"]], "split() (pyesd.splitter.splitter method)": [[5, "pyESD.splitter.Splitter.split"]], "split() (pyesd.splitter.yearlybootstrapper method)": [[5, "pyESD.splitter.YearlyBootstrapper.split"]], "store_csv() (in module pyesd.esd_utils)": [[5, "pyESD.ESD_utils.store_csv"]], "store_pickle() (in module pyesd.esd_utils)": [[5, "pyESD.ESD_utils.store_pickle"]], "transform() (pyesd.ensemble_models.ensembleregressor method)": [[5, "pyESD.ensemble_models.EnsembleRegressor.transform"]], "transform() (pyesd.feature_selection.recursivefeatureelimination method)": [[5, "pyESD.feature_selection.RecursiveFeatureElimination.transform"]], "transform() (pyesd.feature_selection.sequentialfeatureselection method)": [[5, "pyESD.feature_selection.SequentialFeatureSelection.transform"]], "transform() (pyesd.feature_selection.treebasedselection method)": [[5, "pyESD.feature_selection.TreeBasedSelection.transform"]], "transform() (pyesd.models.hyperparameteroptimize method)": [[5, "pyESD.models.HyperparameterOptimize.transform"]], "transform() (pyesd.standardizer.monthlystandardizer method)": [[5, "pyESD.standardizer.MonthlyStandardizer.transform"]], "transform() (pyesd.standardizer.nostandardizer method)": [[5, "pyESD.standardizer.NoStandardizer.transform"]], "transform() (pyesd.standardizer.pcascaling method)": [[5, "pyESD.standardizer.PCAScaling.transform"]], "transform() (pyesd.standardizer.standardscaling method)": [[5, "pyESD.standardizer.StandardScaling.transform"]], "tree_based_feature_importance() (pyesd.stationoperator.stationoperator method)": [[5, "pyESD.StationOperator.StationOperator.tree_based_feature_importance"]], "tree_based_feature_importance() (pyesd.predictand.predictandtimeseries method)": [[5, "pyESD.predictand.PredictandTimeseries.tree_based_feature_importance"]], "tree_based_feature_permutation_importance() (pyesd.stationoperator.stationoperator method)": [[5, "pyESD.StationOperator.StationOperator.tree_based_feature_permutation_importance"]], "tree_based_feature_permutation_importance() (pyesd.predictand.predictandtimeseries method)": [[5, "pyESD.predictand.PredictandTimeseries.tree_based_feature_permutation_importance"]]}})