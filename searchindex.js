Search.setIndex({"docnames": ["examples", "index", "installation", "methods", "modules", "overview", "pyESD", "testing", "tutorials"], "filenames": ["examples.rst", "index.rst", "installation.rst", "methods.rst", "modules.rst", "overview.rst", "pyESD.rst", "testing.rst", "tutorials.rst"], "titles": ["Practical examples", "Akwaaba! Welcome to PyESD Documentation!", "Installation", "Methods", "API Reference", "Overview", "pyESD package", "Testing", "Tutorials"], "terms": {"The": [0, 1, 2, 3, 5, 6, 7], "packag": [0, 1, 2, 4, 5, 7], "ha": [0, 5, 6], "been": [0, 5], "demonstr": 0, "real": 0, "word": 0, "observ": [0, 5], "dataset": [0, 4, 5, 6], "In": [0, 6], "thi": [0, 1, 3, 4, 5, 6], "we": [0, 1], "show": [0, 3], "model": [0, 1, 2, 4, 5], "routin": [0, 1, 2, 5, 6], "follow": [0, 2, 3, 6], "product": [0, 1, 3, 5], "control": 0, "script": [0, 7], "individu": [0, 1], "step": [0, 3, 6], "can": [0, 1, 2, 3, 6], "found": [0, 7], "folder": [0, 2, 6, 7], "all": [0, 1, 5, 6], "data": [0, 1, 3, 5, 6, 7], "i": [0, 1, 2, 3, 4, 6, 7], "publicli": 0, "avail": [0, 6], "project": [0, 5], "reli": [0, 5], "non": [0, 6], "open": [0, 1, 5], "access": 0, "collect": 0, "from": [0, 1, 4, 5, 6], "meteorologi": 0, "agenc": [0, 5], "gmet": 0, "regressor": [0, 4, 5, 6], "improv": [0, 1, 5, 6], "perform": [0, 5, 6], "transfer": [0, 1, 3, 5], "function": [0, 1, 3, 5, 6], "requir": [0, 2, 3, 4, 5, 6], "monthli": [0, 6], "rainfal": [0, 5], "ar": [0, 1, 3, 5, 6, 7], "pleas": [0, 1, 3, 6], "note": [0, 1, 3, 6], "page": [0, 1, 3], "under": [0, 1, 3, 4, 5, 6], "activ": [0, 1, 3, 4, 6], "delop": [0, 1, 3], "would": [0, 1, 2, 4, 5, 6, 7], "benefit": [0, 1, 4], "its": [0, 1, 4, 5, 6], "extens": [0, 1, 4], "thank": [0, 1, 3], "understand": [0, 1, 3, 5], "python": [1, 5], "framwork": 1, "empir": [1, 5], "statist": [1, 5, 6], "downscal": [1, 3, 6], "an": [1, 2, 5, 6], "sourc": [1, 5, 6], "framework": [1, 5], "perfect": [1, 6], "prognosi": 1, "approach": 1, "ani": [1, 5], "climat": [1, 5, 6], "relat": 1, "variabl": [1, 5, 6], "precipit": [1, 6], "temperatur": [1, 6], "wind": 1, "speed": 1, "us": [1, 2, 3, 5, 6, 7], "reanalysi": [1, 5], "eg": [1, 6], "era5": [1, 5, 6], "predictor": [1, 3, 4, 5, 6], "featur": [1, 5], "cycl": [1, 6], "includ": [1, 5], "preprocess": [1, 5, 6], "select": [1, 3, 5, 6], "construct": [1, 3, 5], "transform": [1, 4, 5, 6], "train": [1, 3, 5, 6], "valid": [1, 6, 7], "evalu": [1, 3, 4, 6], "futur": [1, 5, 6], "predict": [1, 4, 5, 6], "serv": 1, "mean": [1, 6], "gener": [1, 3, 5, 6, 7], "circul": [1, 5], "high": 1, "resolut": [1, 5], "relev": [1, 5], "impact": [1, 5], "assess": [1, 5], "drought": 1, "flood": 1, "wildfir": 1, "risk": [1, 6], "other": [1, 5, 6], "main": 1, "specialti": 1, "well": [1, 5], "design": [1, 5, 6], "oop": 1, "style": [1, 6], "consid": 1, "weather": [1, 5], "station": [1, 3, 5, 6], "object": [1, 5, 6], "attribut": [1, 6], "ensur": 1, "fewer": 1, "line": 1, "code": [1, 6], "cover": 1, "end": 1, "chang": [1, 5], "mani": [1, 5], "machin": [1, 5], "learn": [1, 2, 3, 5, 6], "algorithm": [1, 5, 6], "techniqu": [1, 5], "experi": 1, "toward": 1, "robust": [1, 6], "coupl": [1, 3], "gcm": [1, 3, 5], "estim": [1, 6], "And": 1, "highlight": [1, 3], "paper": 1, "descript": [1, 6], "submit": 1, "gmd": 1, "get": [1, 4, 6], "start": [1, 6], "overview": 1, "instal": 1, "method": [1, 5, 6], "publish": 1, "mit": 1, "copyright": 1, "c": [1, 2], "2023": 1, "daniel": [1, 5, 6], "boateng": [1, 5, 6], "index": [1, 6], "modul": [1, 2, 4], "search": 1, "content": [1, 4], "websit": 1, "develop": [1, 2, 3, 4, 6], "howev": [1, 5, 6], "acknowledg": 1, "your": [1, 6], "help": 1, "make": 1, "better": [1, 5, 6], "wider": 1, "usabl": 1, "kindli": 1, "rais": [1, 6], "pull": 1, "request": 1, "version": [1, 2, 5, 6, 7], "github": 1, "http": 1, "com": [1, 2], "dan": [1, 2], "boat": [1, 2], "standard": [2, 4, 5], "intal": 2, "pip": 2, "pyesd": [2, 4], "same": [2, 6], "edit": 2, "mode": 2, "e": [2, 5, 6], "flag": [2, 7], "updat": 2, "clone": 2, "git": 2, "It": [2, 5, 6], "recommend": [2, 6], "isol": 2, "environ": 2, "virtualenv": 2, "conda": 2, "creat": [2, 5, 6], "new": [2, 6], "some": [2, 6], "through": [2, 6], "distro": 2, "If": [2, 6], "fail": 2, "manual": 2, "sklearn": [2, 6], "u": [2, 5], "scikit": 2, "xarrai": [2, 6], "forg": 2, "dask": 2, "netcdf4": 2, "bottleneck": 2, "panda": [2, 6], "seaborn": [2, 6], "tensorflow": 2, "matplotlib": [2, 6], "eof": 2, "cartopi": 2, "option": [2, 6], "xgboost": 2, "optim": [2, 6], "base": [3, 5, 6], "here": [3, 6], "outlin": [3, 6], "typic": 3, "exampl": [3, 5, 6], "prepar": 3, "submodul": 4, "esd_util": 4, "computestat": [4, 6], "midpointnorm": [4, 6], "stackarrai": [4, 6], "stattest": [4, 6], "_get_month": [4, 6], "extract_indices_around": [4, 6], "extract_region": [4, 6], "haversin": [4, 6], "levene_test": [4, 6], "load_all_st": [4, 6], "load_csv": [4, 6], "load_pickl": [4, 6], "map_to_xarrai": [4, 6], "plot_background": [4, 6], "plot_ks_stat": [4, 6], "ranksums_test": [4, 6], "store_csv": [4, 6], "store_pickl": [4, 6], "predictor_bas": 4, "fit": [4, 6], "load": [4, 5, 6], "plot": 4, "save": [4, 6], "predictor_gener": 4, "regionalaverag": [4, 6], "stationoper": 4, "climate_scor": [4, 6], "cross_validate_and_predict": [4, 6], "ensemble_transform": [4, 6], "fit_predictor": [4, 6], "get_explained_vari": [4, 6], "get_var": [4, 6], "predictor_correl": [4, 6], "relative_predictor_import": [4, 6], "selected_nam": [4, 6], "set_model": [4, 5, 6], "set_predictor": [4, 6], "set_standard": [4, 6], "set_transform": [4, 6], "tree_based_feature_import": [4, 6], "tree_based_feature_permutation_import": [4, 6], "load_stat": [4, 6], "weatherstationpreprocess": 4, "read_station_csv": [4, 5, 6], "read_weatherstationnam": [4, 6], "read_weatherst": [4, 6], "dense_model": 4, "deeplearningregressor": [4, 6], "build_model": [4, 6], "compile_model": [4, 6], "convert_to_sklearn_regressor": [4, 6], "plot_network": [4, 6], "ensemble_model": 4, "ensembleregressor": [4, 6], "cross_val_predict": [4, 6], "cross_val_scor": [4, 6], "cross_valid": [4, 6], "get_param": [4, 6], "predict_averag": [4, 6], "score": [4, 5, 6], "feature_select": 4, "recursivefeatureelimin": [4, 6], "cv_test_scor": [4, 6], "print_selected_featur": [4, 6], "sequentialfeatureselect": [4, 6], "treebasedselect": [4, 6], "feature_import": [4, 6], "permutation_importance_": [4, 6], "metric": 4, "mae": [4, 6], "mse": [4, 6], "nse": [4, 6], "r2_score": [4, 6], "rmse": [4, 6], "adjusted_r2": [4, 6], "explained_vari": [4, 6], "max_error": [4, 6], "hyperparameteroptim": [4, 6], "best_estim": [4, 6], "predict_log_proba": [4, 6], "metaattribut": [4, 6], "alpha": [4, 6], "best_param": [4, 6], "coef": [4, 6], "intercept": [4, 6], "set_param": [4, 6], "barplot": [4, 6], "boxplot": [4, 6], "correlation_heatmap": [4, 6], "heatmap": [4, 6], "lineplot": [4, 6], "plot_monthly_mean": [4, 6], "plot_projection_comparison": [4, 6], "plot_time_seri": [4, 6], "scatterplot": [4, 6], "plot_util": 4, "apply_styl": [4, 6], "barplot_data": [4, 6], "boxplot_data": [4, 6], "correlation_data": [4, 6], "count_predictor": [4, 6], "extract_comparison_data_mean": [4, 6], "extract_time_seri": [4, 6], "monthly_mean": [4, 6], "prediction_example_data": [4, 6], "resample_monthli": [4, 6], "resample_season": [4, 6], "seasonal_mean": [4, 6], "predictand": [4, 5], "predictandtimeseri": [4, 6], "splitter": 4, "monthlybooststrapp": [4, 6], "split": [4, 6], "get_n_split": [4, 6], "yearlybootstrapp": [4, 6], "monthlystandard": [4, 5, 6], "inverse_transform": [4, 6], "nostandard": [4, 6], "pcascal": [4, 6], "fit_transform": [4, 6], "standardsc": [4, 5, 6], "add_seasonal_cycl": [4, 6], "get_annual_mean_cycl": [4, 6], "get_mean_predict": [4, 6], "remove_seasonal_cycl": [4, 6], "teleconnect": [4, 5], "ea": [4, 6], "plot_cov_matrix": [4, 6], "eawr": [4, 6], "mei": [4, 6], "nao": [4, 6], "scan": [4, 6], "eof_analysi": [4, 6], "data_preprocessing_util": 4, "mlr": 4, "bootstrappedforwardselect": [4, 6], "bootstrappedregress": [4, 6], "fit_predict": [4, 6], "forwardselect": [4, 6], "average_additional_result": [4, 6], "average_coef": [4, 6], "fit_act": [4, 6], "predict_act": [4, 6], "set_additional_result": [4, 6], "multiplelsregress": [4, 6], "set_expand_coef": [4, 6], "_get_act": [4, 6], "upgrad": 4, "inform": [5, 6], "crucial": 5, "becaus": 5, "widespread": 5, "divers": 5, "effect": 5, "human": 5, "caus": 5, "To": 5, "essenti": 5, "accur": 5, "about": 5, "condit": 5, "scale": [5, 6], "studi": 5, "strategi": 5, "address": 5, "them": [5, 6], "physic": 5, "numer": 5, "pattern": 5, "differ": [5, 6], "assumpt": 5, "radi": 5, "forc": 5, "thei": [5, 6], "have": [5, 6], "limit": 5, "while": 5, "replic": 5, "current": [5, 6], "past": 5, "atmospher": 5, "process": [5, 6], "larg": 5, "struggl": 5, "repres": 5, "smaller": 5, "like": [5, 6], "local": 5, "cloud": 5, "certain": 5, "due": 5, "coars": 5, "addition": [5, 6], "adequ": 5, "captur": 5, "region": 5, "variat": 5, "overcom": 5, "simul": 5, "need": [5, 6], "allow": 5, "more": [5, 6], "fall": [5, 6], "two": [5, 6], "categori": 5, "output": [5, 6], "mo": 5, "pp": 5, "directli": [5, 6], "bia": 5, "correct": 5, "": [5, 6], "inflex": 5, "ti": 5, "specif": [5, 6], "On": 5, "hand": 5, "esd": [5, 6], "connect": 5, "establish": 5, "relationship": 5, "between": [5, 6], "larger": 5, "act": 5, "complex": 5, "substanti": 5, "offer": 5, "flexibl": 5, "work": [5, 6], "variou": [5, 7], "tool": 5, "g": [5, 6], "german": 5, "servic": 5, "ghana": 5, "met": 5, "analysi": [5, 6], "cmip5": 5, "cmip6": 5, "extract": [5, 6], "indic": [5, 6], "engin": 5, "choos": 5, "ensembl": [5, 6], "provid": [5, 6], "visual": 5, "adapt": 5, "document": 5, "user": 5, "friendli": 5, "For": 5, "given": [5, 6], "directori": [5, 6], "oper": [5, 6], "so": [5, 6], "appli": 5, "set": [5, 6], "weatherst": [5, 6], "filenam": [5, 6], "station_dir": 5, "varnam": [5, 6], "cv": [5, 6], "timeseriessplit": 5, "n_split": [5, 6], "10": [5, 6], "detail": 5, "doesn": [5, 6], "spatial": 5, "grid": 5, "lack": 5, "capabl": 5, "heavili": 5, "simpl": 5, "deep": [5, 6], "architectur": 5, "daili": 5, "still": 5, "experiment": 5, "instanc": 5, "possibl": [5, 6], "classifi": 5, "within": 5, "wet": 5, "dry": 5, "befor": 5, "occurr": 5, "extrem": 5, "event": 5, "pre": 5, "handl": [5, 6], "format": 5, "easili": 5, "welcom": 5, "suggest": 5, "softwar": 5, "wa": [5, 6], "ph": 5, "d": 5, "student": 5, "univers": 5, "t\u00fcbingen": 5, "alongsid": 5, "hi": 5, "involv": 5, "paleoclim": 5, "isotop": 5, "enabl": 5, "dynam": 5, "he": 5, "dedic": 5, "scientif": 5, "aim": 5, "enhanc": 5, "reproduc": 5, "research": [5, 6], "outcom": 5, "believ": 5, "scienc": 5, "fun": 5, "were": [5, 6], "also": [5, 6], "pyclimat": 5, "anoth": 5, "analyz": 5, "which": [5, 6], "sinc": [5, 6], "first": [5, 6], "dai": 5, "program": 5, "trust": 5, "ttp": 5, "aspect": 5, "life": 5, "fri": 6, "nov": 6, "12": 6, "14": 6, "02": 6, "28": 6, "2021": 6, "author": 6, "dboateng": 6, "contian": 6, "util": 6, "class": 6, "sx": 6, "y": 6, "sy": 6, "test": 6, "return_scor": 6, "true": 6, "part": 6, "parmap": 6, "map": 6, "independ": 6, "name": 6, "domain_nam": 6, "select_domain": 6, "is_dataset": 6, "fals": 6, "vmin": 6, "none": 6, "vmax": 6, "midpoint": 6, "clip": 6, "normal": 6, "At": 6, "moment": 6, "bug": 6, "diverg": 6, "colormap": 6, "colorbar": 6, "rang": 6, "zero": 6, "both": 6, "magnitud": 6, "might": 6, "color": 6, "offsetnorm": 6, "origin": 6, "joe": 6, "kingto": 6, "modifi": [6, 7], "bar": 6, "0": 6, "1": 6, "divid": 6, "5": 6, "own": 6, "practic": 6, "quantit": 6, "paramet": 6, "float": 6, "initi": 6, "minimum": 6, "maximum": 6, "valu": 6, "respect": 6, "input": 6, "__call__": 6, "A": 6, "call": 6, "autoscale_non": 6, "bool": 6, "default": 6, "outsid": 6, "whichev": 6, "closer": 6, "mask": 6, "remain": 6, "silent": 6, "defeat": 6, "purpos": 6, "over": 6, "lead": 6, "surpris": 6, "therefor": 6, "return": 6, "x": 6, "dim": 6, "stack": 6, "arrai": 6, "onli": 6, "one": 6, "dimens": 6, "left": 6, "dataarrai": 6, "sole": 6, "after": 6, "parallel": 6, "comput": 6, "signific": 6, "xr": 6, "done": 6, "along": 6, "p": 6, "except": 6, "scalar": 6, "against": 6, "Or": 6, "singl": 6, "sign": 6, "k": 6, "kolmogorov": 6, "smirnov": 6, "mw": 6, "mann": 6, "whitnei": 6, "wc": 6, "wilcoxon": 6, "t": 6, "sampl": 6, "run": [6, 7], "pvalx": 6, "contain": 6, "npdatetime64": 6, "month": 6, "januari": 6, "2": 6, "februari": 6, "lat": 6, "lon": 6, "radiu": 6, "datarang": 6, "minlat": 6, "maxlat": 6, "minlon": 6, "maxlon": 6, "lon1": 6, "lat1": 6, "lon2": 6, "lat2": 6, "path": 6, "stationnam": 6, "assum": 6, "store": 6, "quantiti": 6, "dictionari": 6, "datarrai": 6, "domain": 6, "ax": 6, "left_label": 6, "bottom_label": 6, "plot_coastlin": 6, "plot_bord": 6, "funtion": 6, "defin": 6, "specifi": 6, "background": 6, "imshow": 6, "argument": 6, "param": 6, "type": 6, "domian": 6, "str": 6, "south": 6, "america": 6, "alaska": 6, "tibet": 6, "plateau": 6, "himalaya": 6, "eurosia": 6, "zealand": 6, "global": 6, "cmap": 6, "level": [6, 7], "center": 6, "output_nam": 6, "output_format": 6, "level_tick": 6, "titl": 6, "path_to_stor": 6, "add_colorbar": 6, "hatch": 6, "fig": 6, "cbar_po": 6, "use_colorbar_default": 6, "orient": 6, "horizont": 6, "plot_project": 6, "plot_stat": 6, "stats_result": 6, "var": 6, "cachedir": 6, "45": 6, "longnam": 6, "abc": 6, "daterang": 6, "regener": 6, "patterns_from": 6, "params_from": 6, "plot_kwarg": 6, "03": 6, "09": 6, "standardizer_constructor": 6, "250": 6, "kwarg": 6, "sun": 6, "21": 6, "00": 6, "55": 6, "37": 6, "elev": 6, "fit_period": 6, "score_period": 6, "predictor_dataset": 6, "predictor_kwarg": 6, "calcul": 6, "string": 6, "pd": 6, "datetimeindex": 6, "should": 6, "refer": 6, "stat_downscaling_tool": 6, "keyword": 6, "These": 6, "pass": 6, "cscore": 6, "similar": 6, "rho": 6, "squar": 6, "skill": 6, "neg": 6, "even": 6, "wors": 6, "than": 6, "doubl": 6, "fit_predictand": 6, "return_cv_scor": 6, "predictor_selector": 6, "selector_method": 6, "recurs": 6, "selector_regressor": 6, "ridg": 6, "num_predictor": 6, "selector_direct": 6, "cal_relative_import": 6, "imput": 6, "impute_method": 6, "impute_ord": 6, "otherwis": 6, "anomali": 6, "pearson": 6, "use_scipi": 6, "fname": 6, "file": 6, "pickl": 6, "where": 6, "self": 6, "replac": 6, "_": 6, "ensemble_learn": 6, "final_estimator_nam": 6, "r2": 6, "neg_root_mean_squared_error": 6, "detrend": 6, "01": 6, "43": 6, "download": 6, "dwd": 6, "time": 6, "seri": 6, "frequenc": 6, "must": 6, "number": 6, "year": 6, "write": 6, "addit": 6, "separ": 6, "3": 6, "read": 6, "downlod": 6, "contact": 6, "uni": 6, "tuebingen": 6, "de": 6, "assist": 6, "return_al": 6, "varibal": 6, "valueerror": 6, "w": 6, "path_to_data": 6, "namedict": 6, "dict": 6, "rel": 6, "absolut": 6, "wed": 6, "mar": 6, "16": 6, "26": 6, "2022": 6, "further": 6, "add": 6, "adam": 6, "loss": 6, "mean_squared_error": 6, "rootmeansquarederror": 6, "epoch": 6, "1000": 6, "verbos": [6, 7], "mon": 6, "11": 6, "35": 6, "n_job": 6, "passthrough": 6, "jan": 6, "17": 6, "18": 6, "regressor_nam": 6, "ard": 6, "n_featur": 6, "direct": 6, "forward": 6, "randomforest": 6, "34": 6, "25": 6, "y_true": 6, "y_pred": 6, "thu": 6, "param_grid": 6, "hyper_method": 6, "xlabel": 6, "ylabel": 6, "test_r2": 6, "varname_std": 6, "test_r2_std": 6, "validation_score_": 6, "legend": 6, "fig_path": 6, "fig_nam": 6, "show_error": 6, "width": 6, "rot": 6, "patch_artist": 6, "cbar_ax": 6, "add_cbar": 6, "label": 6, "correl": 6, "coefficinet": 6, "cbar": 6, "station_num": 6, "obs_train_nam": 6, "ob": 6, "1958": 6, "2010": 6, "obs_test_nam": 6, "2011": 6, "2020": 6, "val_predict_nam": 6, "test_predict_nam": 6, "std": 6, "lolim": 6, "id_nam": 6, "stationloc_dir": 6, "dataset_varnam": 6, "figpath": 6, "fignam": 6, "use_id": 6, "ymax": 6, "ymin": 6, "window": 6, "apr": 6, "49": 6, "fontsiz": 6, "20": 6, "linewidth": 6, "bmh": 6, "fivethirtyeight": 6, "use_cv_al": 6, "22": 6, "how": 6, "much": 6, "period": 6, "annual": 6, "mlr_learn": 6, "tue": 6, "52": 6, "13": 6, "500": 6, "test_siz": 6, "block_siz": 6, "group": 6, "num_block": 6, "num_sampl": 6, "n_block": 6, "shuffl": 6, "3333333333333333": 6, "min_month_per_year": 6, "9": 6, "pick": 6, "complet": 6, "you": 6, "yb": 6, "enumer": 6, "x_train": 6, "y_train": 6, "iloc": 6, "x_test": 6, "y_test": 6, "int": 6, "ratio": 6, "pair": 6, "datafram": 6, "dummi": 6, "baseestim": 6, "transformermixin": 6, "season": 6, "possibli": 6, "linear": 6, "trend": 6, "affect": 6, "remov": 6, "subtract": 6, "regress": 6, "afterward": 6, "varianc": 6, "whether": 6, "hold": 6, "Not": 6, "previous": 6, "x_unstandard": 6, "unstandard": 6, "x_transform": 6, "just": 6, "doe": 6, "noth": 6, "n_compon": 6, "kernel": 6, "fit_param": 6, "shape": 6, "n_sampl": 6, "n_output": 6, "target": 6, "unsupervis": 6, "x_new": 6, "ndarrai": 6, "n_features_new": 6, "with_std": 6, "with_mean": 6, "unit_vari": 6, "norm": 6, "l2": 6, "mean_seasonal_cycl": 6, "numpi": 6, "re": 6, "column": 6, "each": 6, "invers": 6, "58": 6, "59": 6, "neof": 6, "eof_packag": 6, "apply_equal_wtg": 6, "pcscale": 6, "7": 6, "48": 6, "There": 6, "three": 6, "layer": 6, "bootstrap": 6, "outer": 6, "implement": 6, "loop": 6, "member": 6, "lasso": 6, "next": 6, "again": 6, "get_coef": 6, "set_coef": 6, "mlr_model": 6, "min_explained_vari": 6, "easi": 6, "interfac": 6, "furthermor": 6, "below": 6, "inclus": 6, "stage": 6, "explain": 6, "least": 6, "amount": 6, "stop": 6, "integ": 6, "cross": 6, "determin": 6, "fold": 6, "n": 6, "some_object": 6, "metaestim": 6, "multipl": 6, "final": 6, "averag": 6, "linearmodel": 6, "coef_": 6, "intercept_": 6, "someth": 6, "els": 6, "arithmet": 6, "taken": 6, "everyth": 6, "inherit": 6, "extent": 6, "interchangibli": 6, "list_of_coef": 6, "additional_result": 6, "dure": 6, "case": 6, "list_of_dict": 6, "mean_additional_result": 6, "mean_coef": 6, "depend": 6, "coeffici": 6, "nonzero": 6, "cv_error": 6, "error": 6, "stepwis": 6, "most": 6, "promis": 6, "candid": 6, "good": 6, "enough": 6, "von": 6, "storch": 6, "1999": 6, "intend": 6, "necessari": 6, "explaned_vari": 6, "list_of_param": 6, "accord": 6, "yhat": 6, "inact": 6, "uncertainti": 6, "deviat": 6, "lowest": 6, "abort": 6, "previou": 6, "row": 6, "length": 6, "exp_var": 6, "whose": 6, "add_result": 6, "linearcoefshandlermixin": 6, "ol": 6, "n_predictor": 6, "often": 6, "expand": 6, "wai": 6, "matrix": 6, "x_activ": 6, "abou": 6, "metadata": 6, "synthet": 7, "locat": 7, "v": 7, "higher": 7}, "objects": {"": [[6, 0, 0, "-", "pyESD"]], "pyESD": [[6, 0, 0, "-", "ESD_utils"], [6, 0, 0, "-", "MLR_model"], [6, 0, 0, "-", "Predictor_Base"], [6, 0, 0, "-", "Predictor_Generator"], [6, 0, 0, "-", "StationOperator"], [6, 0, 0, "-", "Weatherstation"], [6, 0, 0, "-", "dense_models"], [6, 0, 0, "-", "ensemble_models"], [6, 0, 0, "-", "feature_selection"], [6, 0, 0, "-", "metrics"], [6, 0, 0, "-", "models"], [6, 0, 0, "-", "plot"], [6, 0, 0, "-", "plot_utils"], [6, 0, 0, "-", "predictand"], [6, 0, 0, "-", "splitter"], [6, 0, 0, "-", "standardizer"], [6, 0, 0, "-", "teleconnections"]], "pyESD.ESD_utils": [[6, 1, 1, "", "ComputeStat"], [6, 2, 1, "", "Dataset"], [6, 2, 1, "", "MidpointNormalize"], [6, 1, 1, "", "StackArray"], [6, 1, 1, "", "StatTest"], [6, 1, 1, "", "_get_month"], [6, 1, 1, "", "extract_indices_around"], [6, 1, 1, "", "extract_region"], [6, 1, 1, "", "haversine"], [6, 1, 1, "", "levene_test"], [6, 1, 1, "", "load_all_stations"], [6, 1, 1, "", "load_csv"], [6, 1, 1, "", "load_pickle"], [6, 1, 1, "", "map_to_xarray"], [6, 1, 1, "", "plot_background"], [6, 1, 1, "", "plot_ks_stats"], [6, 1, 1, "", "ranksums_test"], [6, 1, 1, "", "store_csv"], [6, 1, 1, "", "store_pickle"]], "pyESD.ESD_utils.Dataset": [[6, 3, 1, "", "get"]], "pyESD.MLR_model": [[6, 2, 1, "", "BootstrappedForwardSelection"], [6, 2, 1, "", "BootstrappedRegression"], [6, 2, 1, "", "ForwardSelection"], [6, 2, 1, "", "MultipleLSRegression"], [6, 1, 1, "", "_get_active"]], "pyESD.MLR_model.BootstrappedRegression": [[6, 3, 1, "", "fit"], [6, 3, 1, "", "fit_predict"], [6, 3, 1, "", "predict"]], "pyESD.MLR_model.ForwardSelection": [[6, 3, 1, "", "average_additional_results"], [6, 3, 1, "", "average_coefs"], [6, 3, 1, "", "fit"], [6, 3, 1, "", "fit_active"], [6, 3, 1, "", "predict"], [6, 3, 1, "", "predict_active"], [6, 3, 1, "", "set_additional_results"]], "pyESD.MLR_model.MultipleLSRegression": [[6, 3, 1, "", "fit"], [6, 3, 1, "", "predict"], [6, 3, 1, "", "set_expand_coefs"]], "pyESD.Predictor_Base": [[6, 2, 1, "", "Predictor"]], "pyESD.Predictor_Base.Predictor": [[6, 3, 1, "", "fit"], [6, 3, 1, "", "get"], [6, 3, 1, "", "load"], [6, 3, 1, "", "plot"], [6, 3, 1, "", "save"]], "pyESD.Predictor_Generator": [[6, 2, 1, "", "RegionalAverage"]], "pyESD.StationOperator": [[6, 2, 1, "", "StationOperator"], [6, 1, 1, "", "load_station"]], "pyESD.StationOperator.StationOperator": [[6, 3, 1, "", "climate_score"], [6, 3, 1, "", "cross_validate_and_predict"], [6, 3, 1, "", "ensemble_transform"], [6, 3, 1, "", "evaluate"], [6, 3, 1, "", "fit"], [6, 3, 1, "", "fit_predictor"], [6, 3, 1, "", "get_explained_variance"], [6, 3, 1, "", "get_var"], [6, 3, 1, "", "predict"], [6, 3, 1, "", "predictor_correlation"], [6, 3, 1, "", "relative_predictor_importance"], [6, 3, 1, "", "save"], [6, 3, 1, "", "selected_names"], [6, 3, 1, "", "set_model"], [6, 3, 1, "", "set_predictors"], [6, 3, 1, "", "set_standardizer"], [6, 3, 1, "", "set_transform"], [6, 3, 1, "", "tree_based_feature_importance"], [6, 3, 1, "", "tree_based_feature_permutation_importance"]], "pyESD.Weatherstation": [[6, 1, 1, "", "read_station_csv"], [6, 1, 1, "", "read_weatherstationnames"], [6, 1, 1, "", "read_weatherstations"]], "pyESD.dense_models": [[6, 2, 1, "", "DeepLearningRegressor"]], "pyESD.dense_models.DeepLearningRegressor": [[6, 3, 1, "", "build_model"], [6, 3, 1, "", "compile_model"], [6, 3, 1, "", "convert_to_sklearn_regressor"], [6, 3, 1, "", "fit"], [6, 3, 1, "", "plot_network"], [6, 3, 1, "", "predict"]], "pyESD.ensemble_models": [[6, 2, 1, "", "EnsembleRegressor"]], "pyESD.ensemble_models.EnsembleRegressor": [[6, 3, 1, "", "cross_val_predict"], [6, 3, 1, "", "cross_val_score"], [6, 3, 1, "", "cross_validate"], [6, 3, 1, "", "fit"], [6, 3, 1, "", "get_params"], [6, 3, 1, "", "predict"], [6, 3, 1, "", "predict_average"], [6, 3, 1, "", "score"], [6, 3, 1, "", "transform"]], "pyESD.feature_selection": [[6, 2, 1, "", "RecursiveFeatureElimination"], [6, 2, 1, "", "SequentialFeatureSelection"], [6, 2, 1, "", "TreeBasedSelection"]], "pyESD.feature_selection.RecursiveFeatureElimination": [[6, 3, 1, "", "cv_test_score"], [6, 3, 1, "", "fit"], [6, 3, 1, "", "print_selected_features"], [6, 3, 1, "", "score"], [6, 3, 1, "", "transform"]], "pyESD.feature_selection.SequentialFeatureSelection": [[6, 3, 1, "", "fit"], [6, 3, 1, "", "print_selected_features"], [6, 3, 1, "", "score"], [6, 3, 1, "", "transform"]], "pyESD.feature_selection.TreeBasedSelection": [[6, 3, 1, "", "feature_importance"], [6, 3, 1, "", "fit"], [6, 3, 1, "", "permutation_importance_"], [6, 3, 1, "", "print_selected_features"], [6, 3, 1, "", "transform"]], "pyESD.metrics": [[6, 2, 1, "", "Evaluate"]], "pyESD.metrics.Evaluate": [[6, 3, 1, "", "MAE"], [6, 3, 1, "", "MSE"], [6, 3, 1, "", "NSE"], [6, 3, 1, "", "R2_score"], [6, 3, 1, "", "RMSE"], [6, 3, 1, "", "adjusted_r2"], [6, 3, 1, "", "explained_variance"], [6, 3, 1, "", "max_error"]], "pyESD.models": [[6, 2, 1, "", "HyperparameterOptimize"], [6, 2, 1, "", "MetaAttributes"], [6, 2, 1, "", "Regressors"]], "pyESD.models.HyperparameterOptimize": [[6, 3, 1, "", "best_estimator"], [6, 3, 1, "", "cross_val_predict"], [6, 3, 1, "", "cross_val_score"], [6, 3, 1, "", "cross_validate"], [6, 3, 1, "", "fit"], [6, 3, 1, "", "predict_log_proba"], [6, 3, 1, "", "score"], [6, 3, 1, "", "transform"]], "pyESD.models.MetaAttributes": [[6, 3, 1, "", "alpha"], [6, 3, 1, "", "best_estimator"], [6, 3, 1, "", "best_params"], [6, 3, 1, "", "coef"], [6, 3, 1, "", "get_params"], [6, 3, 1, "", "intercept"], [6, 3, 1, "", "set_params"]], "pyESD.models.Regressors": [[6, 3, 1, "", "cross_val_predict"], [6, 3, 1, "", "cross_val_score"], [6, 3, 1, "", "cross_validate"], [6, 3, 1, "", "fit"], [6, 3, 1, "", "predict"], [6, 3, 1, "", "score"], [6, 3, 1, "", "set_model"]], "pyESD.plot": [[6, 1, 1, "", "barplot"], [6, 1, 1, "", "boxplot"], [6, 1, 1, "", "correlation_heatmap"], [6, 1, 1, "", "heatmaps"], [6, 1, 1, "", "lineplot"], [6, 1, 1, "", "plot_monthly_mean"], [6, 1, 1, "", "plot_projection_comparison"], [6, 1, 1, "", "plot_time_series"], [6, 1, 1, "", "scatterplot"]], "pyESD.plot_utils": [[6, 1, 1, "", "apply_style"], [6, 1, 1, "", "barplot_data"], [6, 1, 1, "", "boxplot_data"], [6, 1, 1, "", "correlation_data"], [6, 1, 1, "", "count_predictors"], [6, 1, 1, "", "extract_comparison_data_means"], [6, 1, 1, "", "extract_time_series"], [6, 1, 1, "", "monthly_mean"], [6, 1, 1, "", "prediction_example_data"], [6, 1, 1, "", "resample_monthly"], [6, 1, 1, "", "resample_seasonally"], [6, 1, 1, "", "seasonal_mean"]], "pyESD.predictand": [[6, 2, 1, "", "PredictandTimeseries"]], "pyESD.predictand.PredictandTimeseries": [[6, 3, 1, "", "climate_score"], [6, 3, 1, "", "cross_validate_and_predict"], [6, 3, 1, "", "ensemble_transform"], [6, 3, 1, "", "evaluate"], [6, 3, 1, "", "fit"], [6, 3, 1, "", "fit_predictor"], [6, 3, 1, "", "get"], [6, 3, 1, "", "predict"], [6, 3, 1, "", "predictor_correlation"], [6, 3, 1, "", "relative_predictor_importance"], [6, 3, 1, "", "selected_names"], [6, 3, 1, "", "set_model"], [6, 3, 1, "", "set_predictors"], [6, 3, 1, "", "set_standardizer"], [6, 3, 1, "", "set_transform"], [6, 3, 1, "", "tree_based_feature_importance"], [6, 3, 1, "", "tree_based_feature_permutation_importance"]], "pyESD.splitter": [[6, 2, 1, "", "MonthlyBooststrapper"], [6, 2, 1, "", "Splitter"], [6, 2, 1, "", "YearlyBootstrapper"]], "pyESD.splitter.MonthlyBooststrapper": [[6, 3, 1, "", "split"]], "pyESD.splitter.Splitter": [[6, 3, 1, "", "get_n_splits"], [6, 3, 1, "", "split"]], "pyESD.splitter.YearlyBootstrapper": [[6, 3, 1, "", "split"]], "pyESD.standardizer": [[6, 2, 1, "", "MonthlyStandardizer"], [6, 2, 1, "", "NoStandardizer"], [6, 2, 1, "", "PCAScaling"], [6, 2, 1, "", "StandardScaling"], [6, 1, 1, "", "add_seasonal_cycle"], [6, 1, 1, "", "get_annual_mean_cycle"], [6, 1, 1, "", "get_mean_prediction"], [6, 1, 1, "", "remove_seasonal_cycle"]], "pyESD.standardizer.MonthlyStandardizer": [[6, 3, 1, "", "fit"], [6, 3, 1, "", "inverse_transform"], [6, 3, 1, "", "transform"]], "pyESD.standardizer.NoStandardizer": [[6, 3, 1, "", "fit"], [6, 3, 1, "", "inverse_transform"], [6, 3, 1, "", "transform"]], "pyESD.standardizer.PCAScaling": [[6, 3, 1, "", "fit"], [6, 3, 1, "", "fit_transform"], [6, 3, 1, "", "inverse_transform"], [6, 3, 1, "", "transform"]], "pyESD.standardizer.StandardScaling": [[6, 3, 1, "", "fit"], [6, 3, 1, "", "inverse_transform"], [6, 3, 1, "", "transform"]], "pyESD.teleconnections": [[6, 2, 1, "", "EA"], [6, 2, 1, "", "EAWR"], [6, 2, 1, "", "MEI"], [6, 2, 1, "", "NAO"], [6, 2, 1, "", "SCAN"], [6, 1, 1, "", "_get_month"], [6, 1, 1, "", "eof_analysis"], [6, 1, 1, "", "extract_region"]], "pyESD.teleconnections.EA": [[6, 3, 1, "", "plot_cov_matrix"]], "pyESD.teleconnections.EAWR": [[6, 3, 1, "", "plot_cov_matrix"]], "pyESD.teleconnections.NAO": [[6, 3, 1, "", "plot_cov_matrix"]], "pyESD.teleconnections.SCAN": [[6, 3, 1, "", "plot_cov_matrix"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"]}, "titleterms": {"practic": 0, "exampl": 0, "1": 0, "downscal": [0, 5], "precipit": 0, "temperatur": 0, "weather": 0, "station": 0, "locat": 0, "neckar": 0, "catchment": 0, "southwestern": 0, "germani": 0, "2": 0, "synopt": 0, "ghana": 0, "us": [0, 8], "stack": 0, "gener": 0, "akwaaba": 1, "welcom": 1, "pyesd": [1, 5, 6, 8], "document": 1, "licens": 1, "indic": [1, 8], "tabl": 1, "instal": 2, "from": 2, "pypi": 2, "github": 2, "depend": 2, "method": 3, "model": [3, 6, 8], "framework": [3, 7], "api": 4, "refer": 4, "overview": 5, "why": 5, "i": 5, "import": 5, "what": 5, "perfect": 5, "prognosi": 5, "can": 5, "do": 5, "t": 5, "who": 5, "develop": 5, "packag": 6, "submodul": 6, "esd_util": 6, "modul": 6, "predictor_bas": 6, "predictor_gener": 6, "stationoper": 6, "weatherstationpreprocess": 6, "dense_model": 6, "ensemble_model": 6, "feature_select": 6, "metric": 6, "plot": 6, "plot_util": 6, "predictand": 6, "splitter": 6, "standard": 6, "teleconnect": [6, 8], "data_preprocessing_util": 6, "mlr": 6, "content": 6, "test": 7, "unittest": 7, "tutori": 8, "how": 8, "preprocess": 8, "data": 8, "select": 8, "predictor": 8, "esd": 8, "includ": 8, "larg": 8, "scale": 8, "optim": 8, "coupl": 8, "gcm": 8, "futur": 8, "predict": 8, "visual": 8, "analysi": 8}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"Practical examples": [[0, "practical-examples"]], "1. Downscaling of precipitation and temperature for weather station located in the Neckar catchment, Southwestern Germany": [[0, "downscaling-of-precipitation-and-temperature-for-weather-station-located-in-the-neckar-catchment-southwestern-germany"]], "2. Downscaling of precipitation for synoptic weather stations in Ghana using Stacked Generalization": [[0, "downscaling-of-precipitation-for-synoptic-weather-stations-in-ghana-using-stacked-generalization"]], "Akwaaba! Welcome to PyESD Documentation!": [[1, "akwaaba-welcome-to-pyesd-documentation"]], "Documentation": [[1, "documentation"]], "License": [[1, "license"]], "Indices and tables": [[1, "indices-and-tables"]], "Installation": [[2, "installation"]], "Install from PyPI": [[2, "install-from-pypi"]], "Install from Github": [[2, "install-from-github"]], "Dependencies": [[2, "dependencies"]], "Methods": [[3, "methods"]], "Modelling framework": [[3, "modelling-framework"]], "API Reference": [[4, "api-reference"]], "Overview": [[5, "id1"]], "Why is downscaling important?": [[5, "why-is-downscaling-important"]], "What is the Perfect Prognosis?": [[5, "what-is-the-perfect-prognosis"]], "What can PyESD do?": [[5, "what-can-pyesd-do"]], "What pyESD can\u2019t do?": [[5, "what-pyesd-can-t-do"]], "Who developed pyESD?": [[5, "who-developed-pyesd"]], "pyESD package": [[6, "pyesd-package"]], "Submodules": [[6, "submodules"]], "pyESD.ESD_utils module": [[6, "module-pyESD.ESD_utils"]], "pyESD.Predictor_Base module": [[6, "module-pyESD.Predictor_Base"]], "pyESD.Predictor_Generator module": [[6, "module-pyESD.Predictor_Generator"]], "pyESD.StationOperator module": [[6, "module-pyESD.StationOperator"]], "pyESD.WeatherstationPreprocessing module": [[6, "module-pyESD.Weatherstation"]], "pyESD.dense_models module": [[6, "module-pyESD.dense_models"]], "pyESD.ensemble_models module": [[6, "module-pyESD.ensemble_models"]], "pyESD.feature_selection module": [[6, "module-pyESD.feature_selection"]], "pyESD.metrics module": [[6, "module-pyESD.metrics"]], "pyESD.models module": [[6, "module-pyESD.models"]], "pyESD.plot module": [[6, "module-pyESD.plot"]], "pyESD.plot_utils module": [[6, "module-pyESD.plot_utils"]], "pyESD.predictand module": [[6, "module-pyESD.predictand"]], "pyESD.splitter module": [[6, "module-pyESD.splitter"]], "pyESD.standardizer module": [[6, "module-pyESD.standardizer"]], "pyESD.teleconnections module": [[6, "module-pyESD.teleconnections"]], "pyESD.data_preprocessing_utils module": [[6, "pyesd-data-preprocessing-utils-module"]], "pyESD.MLR module": [[6, "module-pyESD.MLR_model"]], "Module contents": [[6, "module-pyESD"]], "Testing": [[7, "testing"]], "UNITTEST FRAMEWORK": [[7, "unittest-framework"]], "Tutorials": [[8, "tutorials"]], "How to preprocess data used by pyESD": [[8, "how-to-preprocess-data-used-by-pyesd"]], "How to select predictors for ESD": [[8, "how-to-select-predictors-for-esd"]], "Including large-scale teleconnection indices predictors": [[8, "including-large-scale-teleconnection-indices-predictors"]], "How to select the optimal model for ESD": [[8, "how-to-select-the-optimal-model-for-esd"]], "Coupling ESD to GCMs for future prediction": [[8, "coupling-esd-to-gcms-for-future-prediction"]], "Visualization and Data Analysis": [[8, "visualization-and-data-analysis"]]}, "indexentries": {"bootstrappedforwardselection (class in pyesd.mlr_model)": [[6, "pyESD.MLR_model.BootstrappedForwardSelection"]], "bootstrappedregression (class in pyesd.mlr_model)": [[6, "pyESD.MLR_model.BootstrappedRegression"]], "computestat() (in module pyesd.esd_utils)": [[6, "pyESD.ESD_utils.ComputeStat"]], "dataset (class in pyesd.esd_utils)": [[6, "pyESD.ESD_utils.Dataset"]], "deeplearningregressor (class in pyesd.dense_models)": [[6, "pyESD.dense_models.DeepLearningRegressor"]], "ea (class in pyesd.teleconnections)": [[6, "pyESD.teleconnections.EA"]], "eawr (class in pyesd.teleconnections)": [[6, "pyESD.teleconnections.EAWR"]], "ensembleregressor (class in pyesd.ensemble_models)": [[6, "pyESD.ensemble_models.EnsembleRegressor"]], "evaluate (class in pyesd.metrics)": [[6, "pyESD.metrics.Evaluate"]], "forwardselection (class in pyesd.mlr_model)": [[6, "pyESD.MLR_model.ForwardSelection"]], "hyperparameteroptimize (class in pyesd.models)": [[6, "pyESD.models.HyperparameterOptimize"]], "mae() (pyesd.metrics.evaluate method)": [[6, "pyESD.metrics.Evaluate.MAE"]], "mei (class in pyesd.teleconnections)": [[6, "pyESD.teleconnections.MEI"]], "mse() (pyesd.metrics.evaluate method)": [[6, "pyESD.metrics.Evaluate.MSE"]], "metaattributes (class in pyesd.models)": [[6, "pyESD.models.MetaAttributes"]], "midpointnormalize (class in pyesd.esd_utils)": [[6, "pyESD.ESD_utils.MidpointNormalize"]], "monthlybooststrapper (class in pyesd.splitter)": [[6, "pyESD.splitter.MonthlyBooststrapper"]], "monthlystandardizer (class in pyesd.standardizer)": [[6, "pyESD.standardizer.MonthlyStandardizer"]], "multiplelsregression (class in pyesd.mlr_model)": [[6, "pyESD.MLR_model.MultipleLSRegression"]], "nao (class in pyesd.teleconnections)": [[6, "pyESD.teleconnections.NAO"]], "nse() (pyesd.metrics.evaluate method)": [[6, "pyESD.metrics.Evaluate.NSE"]], "nostandardizer (class in pyesd.standardizer)": [[6, "pyESD.standardizer.NoStandardizer"]], "pcascaling (class in pyesd.standardizer)": [[6, "pyESD.standardizer.PCAScaling"]], "predictandtimeseries (class in pyesd.predictand)": [[6, "pyESD.predictand.PredictandTimeseries"]], "predictor (class in pyesd.predictor_base)": [[6, "pyESD.Predictor_Base.Predictor"]], "r2_score() (pyesd.metrics.evaluate method)": [[6, "pyESD.metrics.Evaluate.R2_score"]], "rmse() (pyesd.metrics.evaluate method)": [[6, "pyESD.metrics.Evaluate.RMSE"]], "recursivefeatureelimination (class in pyesd.feature_selection)": [[6, "pyESD.feature_selection.RecursiveFeatureElimination"]], "regionalaverage (class in pyesd.predictor_generator)": [[6, "pyESD.Predictor_Generator.RegionalAverage"]], "regressors (class in pyesd.models)": [[6, "pyESD.models.Regressors"]], "scan (class in pyesd.teleconnections)": [[6, "pyESD.teleconnections.SCAN"]], "sequentialfeatureselection (class in pyesd.feature_selection)": [[6, "pyESD.feature_selection.SequentialFeatureSelection"]], "splitter (class in pyesd.splitter)": [[6, "pyESD.splitter.Splitter"]], "stackarray() (in module pyesd.esd_utils)": [[6, "pyESD.ESD_utils.StackArray"]], "standardscaling (class in pyesd.standardizer)": [[6, "pyESD.standardizer.StandardScaling"]], "stattest() (in module pyesd.esd_utils)": [[6, "pyESD.ESD_utils.StatTest"]], "stationoperator (class in pyesd.stationoperator)": [[6, "pyESD.StationOperator.StationOperator"]], "treebasedselection (class in pyesd.feature_selection)": [[6, "pyESD.feature_selection.TreeBasedSelection"]], "yearlybootstrapper (class in pyesd.splitter)": [[6, "pyESD.splitter.YearlyBootstrapper"]], "_get_active() (in module pyesd.mlr_model)": [[6, "pyESD.MLR_model._get_active"]], "_get_month() (in module pyesd.esd_utils)": [[6, "pyESD.ESD_utils._get_month"]], "_get_month() (in module pyesd.teleconnections)": [[6, "pyESD.teleconnections._get_month"]], "add_seasonal_cycle() (in module pyesd.standardizer)": [[6, "pyESD.standardizer.add_seasonal_cycle"]], "adjusted_r2() (pyesd.metrics.evaluate method)": [[6, "pyESD.metrics.Evaluate.adjusted_r2"]], "alpha() (pyesd.models.metaattributes method)": [[6, "pyESD.models.MetaAttributes.alpha"]], "apply_style() (in module pyesd.plot_utils)": [[6, "pyESD.plot_utils.apply_style"]], "average_additional_results() (pyesd.mlr_model.forwardselection method)": [[6, "pyESD.MLR_model.ForwardSelection.average_additional_results"]], "average_coefs() (pyesd.mlr_model.forwardselection method)": [[6, "pyESD.MLR_model.ForwardSelection.average_coefs"]], "barplot() (in module pyesd.plot)": [[6, "pyESD.plot.barplot"]], "barplot_data() (in module pyesd.plot_utils)": [[6, "pyESD.plot_utils.barplot_data"]], "best_estimator() (pyesd.models.hyperparameteroptimize method)": [[6, "pyESD.models.HyperparameterOptimize.best_estimator"]], "best_estimator() (pyesd.models.metaattributes method)": [[6, "pyESD.models.MetaAttributes.best_estimator"]], "best_params() (pyesd.models.metaattributes method)": [[6, "pyESD.models.MetaAttributes.best_params"]], "boxplot() (in module pyesd.plot)": [[6, "pyESD.plot.boxplot"]], "boxplot_data() (in module pyesd.plot_utils)": [[6, "pyESD.plot_utils.boxplot_data"]], "build_model() (pyesd.dense_models.deeplearningregressor method)": [[6, "pyESD.dense_models.DeepLearningRegressor.build_model"]], "climate_score() (pyesd.stationoperator.stationoperator method)": [[6, "pyESD.StationOperator.StationOperator.climate_score"]], "climate_score() (pyesd.predictand.predictandtimeseries method)": [[6, "pyESD.predictand.PredictandTimeseries.climate_score"]], "coef() (pyesd.models.metaattributes method)": [[6, "pyESD.models.MetaAttributes.coef"]], "compile_model() (pyesd.dense_models.deeplearningregressor method)": [[6, "pyESD.dense_models.DeepLearningRegressor.compile_model"]], "convert_to_sklearn_regressor() (pyesd.dense_models.deeplearningregressor method)": [[6, "pyESD.dense_models.DeepLearningRegressor.convert_to_sklearn_regressor"]], "correlation_data() (in module pyesd.plot_utils)": [[6, "pyESD.plot_utils.correlation_data"]], "correlation_heatmap() (in module pyesd.plot)": [[6, "pyESD.plot.correlation_heatmap"]], "count_predictors() (in module pyesd.plot_utils)": [[6, "pyESD.plot_utils.count_predictors"]], "cross_val_predict() (pyesd.ensemble_models.ensembleregressor method)": [[6, "pyESD.ensemble_models.EnsembleRegressor.cross_val_predict"]], "cross_val_predict() (pyesd.models.hyperparameteroptimize method)": [[6, "pyESD.models.HyperparameterOptimize.cross_val_predict"]], "cross_val_predict() (pyesd.models.regressors method)": [[6, "pyESD.models.Regressors.cross_val_predict"]], "cross_val_score() (pyesd.ensemble_models.ensembleregressor method)": [[6, "pyESD.ensemble_models.EnsembleRegressor.cross_val_score"]], "cross_val_score() (pyesd.models.hyperparameteroptimize method)": [[6, "pyESD.models.HyperparameterOptimize.cross_val_score"]], "cross_val_score() (pyesd.models.regressors method)": [[6, "pyESD.models.Regressors.cross_val_score"]], "cross_validate() (pyesd.ensemble_models.ensembleregressor method)": [[6, "pyESD.ensemble_models.EnsembleRegressor.cross_validate"]], "cross_validate() (pyesd.models.hyperparameteroptimize method)": [[6, "pyESD.models.HyperparameterOptimize.cross_validate"]], "cross_validate() (pyesd.models.regressors method)": [[6, "pyESD.models.Regressors.cross_validate"]], "cross_validate_and_predict() (pyesd.stationoperator.stationoperator method)": [[6, "pyESD.StationOperator.StationOperator.cross_validate_and_predict"]], "cross_validate_and_predict() (pyesd.predictand.predictandtimeseries method)": [[6, "pyESD.predictand.PredictandTimeseries.cross_validate_and_predict"]], "cv_test_score() (pyesd.feature_selection.recursivefeatureelimination method)": [[6, "pyESD.feature_selection.RecursiveFeatureElimination.cv_test_score"]], "ensemble_transform() (pyesd.stationoperator.stationoperator method)": [[6, "pyESD.StationOperator.StationOperator.ensemble_transform"]], "ensemble_transform() (pyesd.predictand.predictandtimeseries method)": [[6, "pyESD.predictand.PredictandTimeseries.ensemble_transform"]], "eof_analysis() (in module pyesd.teleconnections)": [[6, "pyESD.teleconnections.eof_analysis"]], "evaluate() (pyesd.stationoperator.stationoperator method)": [[6, "pyESD.StationOperator.StationOperator.evaluate"]], "evaluate() (pyesd.predictand.predictandtimeseries method)": [[6, "pyESD.predictand.PredictandTimeseries.evaluate"]], "explained_variance() (pyesd.metrics.evaluate method)": [[6, "pyESD.metrics.Evaluate.explained_variance"]], "extract_comparison_data_means() (in module pyesd.plot_utils)": [[6, "pyESD.plot_utils.extract_comparison_data_means"]], "extract_indices_around() (in module pyesd.esd_utils)": [[6, "pyESD.ESD_utils.extract_indices_around"]], "extract_region() (in module pyesd.esd_utils)": [[6, "pyESD.ESD_utils.extract_region"]], "extract_region() (in module pyesd.teleconnections)": [[6, "pyESD.teleconnections.extract_region"]], "extract_time_series() (in module pyesd.plot_utils)": [[6, "pyESD.plot_utils.extract_time_series"]], "feature_importance() (pyesd.feature_selection.treebasedselection method)": [[6, "pyESD.feature_selection.TreeBasedSelection.feature_importance"]], "fit() (pyesd.mlr_model.bootstrappedregression method)": [[6, "pyESD.MLR_model.BootstrappedRegression.fit"]], "fit() (pyesd.mlr_model.forwardselection method)": [[6, "pyESD.MLR_model.ForwardSelection.fit"]], "fit() (pyesd.mlr_model.multiplelsregression method)": [[6, "pyESD.MLR_model.MultipleLSRegression.fit"]], "fit() (pyesd.predictor_base.predictor method)": [[6, "pyESD.Predictor_Base.Predictor.fit"]], "fit() (pyesd.stationoperator.stationoperator method)": [[6, "pyESD.StationOperator.StationOperator.fit"]], "fit() (pyesd.dense_models.deeplearningregressor method)": [[6, "pyESD.dense_models.DeepLearningRegressor.fit"]], "fit() (pyesd.ensemble_models.ensembleregressor method)": [[6, "pyESD.ensemble_models.EnsembleRegressor.fit"]], "fit() (pyesd.feature_selection.recursivefeatureelimination method)": [[6, "pyESD.feature_selection.RecursiveFeatureElimination.fit"]], "fit() (pyesd.feature_selection.sequentialfeatureselection method)": [[6, "pyESD.feature_selection.SequentialFeatureSelection.fit"]], "fit() (pyesd.feature_selection.treebasedselection method)": [[6, "pyESD.feature_selection.TreeBasedSelection.fit"]], "fit() (pyesd.models.hyperparameteroptimize method)": [[6, "pyESD.models.HyperparameterOptimize.fit"]], "fit() (pyesd.models.regressors method)": [[6, "pyESD.models.Regressors.fit"]], "fit() (pyesd.predictand.predictandtimeseries method)": [[6, "pyESD.predictand.PredictandTimeseries.fit"]], "fit() (pyesd.standardizer.monthlystandardizer method)": [[6, "pyESD.standardizer.MonthlyStandardizer.fit"]], "fit() (pyesd.standardizer.nostandardizer method)": [[6, "pyESD.standardizer.NoStandardizer.fit"]], "fit() (pyesd.standardizer.pcascaling method)": [[6, "pyESD.standardizer.PCAScaling.fit"]], "fit() (pyesd.standardizer.standardscaling method)": [[6, "pyESD.standardizer.StandardScaling.fit"]], "fit_active() (pyesd.mlr_model.forwardselection method)": [[6, "pyESD.MLR_model.ForwardSelection.fit_active"]], "fit_predict() (pyesd.mlr_model.bootstrappedregression method)": [[6, "pyESD.MLR_model.BootstrappedRegression.fit_predict"]], "fit_predictor() (pyesd.stationoperator.stationoperator method)": [[6, "pyESD.StationOperator.StationOperator.fit_predictor"]], "fit_predictor() (pyesd.predictand.predictandtimeseries method)": [[6, "pyESD.predictand.PredictandTimeseries.fit_predictor"]], "fit_transform() (pyesd.standardizer.pcascaling method)": [[6, "pyESD.standardizer.PCAScaling.fit_transform"]], "get() (pyesd.esd_utils.dataset method)": [[6, "pyESD.ESD_utils.Dataset.get"]], "get() (pyesd.predictor_base.predictor method)": [[6, "pyESD.Predictor_Base.Predictor.get"]], "get() (pyesd.predictand.predictandtimeseries method)": [[6, "pyESD.predictand.PredictandTimeseries.get"]], "get_annual_mean_cycle() (in module pyesd.standardizer)": [[6, "pyESD.standardizer.get_annual_mean_cycle"]], "get_explained_variance() (pyesd.stationoperator.stationoperator method)": [[6, "pyESD.StationOperator.StationOperator.get_explained_variance"]], "get_mean_prediction() (in module pyesd.standardizer)": [[6, "pyESD.standardizer.get_mean_prediction"]], "get_n_splits() (pyesd.splitter.splitter method)": [[6, "pyESD.splitter.Splitter.get_n_splits"]], "get_params() (pyesd.ensemble_models.ensembleregressor method)": [[6, "pyESD.ensemble_models.EnsembleRegressor.get_params"]], "get_params() (pyesd.models.metaattributes method)": [[6, "pyESD.models.MetaAttributes.get_params"]], "get_var() (pyesd.stationoperator.stationoperator method)": [[6, "pyESD.StationOperator.StationOperator.get_var"]], "haversine() (in module pyesd.esd_utils)": [[6, "pyESD.ESD_utils.haversine"]], "heatmaps() (in module pyesd.plot)": [[6, "pyESD.plot.heatmaps"]], "intercept() (pyesd.models.metaattributes method)": [[6, "pyESD.models.MetaAttributes.intercept"]], "inverse_transform() (pyesd.standardizer.monthlystandardizer method)": [[6, "pyESD.standardizer.MonthlyStandardizer.inverse_transform"]], "inverse_transform() (pyesd.standardizer.nostandardizer method)": [[6, "pyESD.standardizer.NoStandardizer.inverse_transform"]], "inverse_transform() (pyesd.standardizer.pcascaling method)": [[6, "pyESD.standardizer.PCAScaling.inverse_transform"]], "inverse_transform() (pyesd.standardizer.standardscaling method)": [[6, "pyESD.standardizer.StandardScaling.inverse_transform"]], "levene_test() (in module pyesd.esd_utils)": [[6, "pyESD.ESD_utils.levene_test"]], "lineplot() (in module pyesd.plot)": [[6, "pyESD.plot.lineplot"]], "load() (pyesd.predictor_base.predictor method)": [[6, "pyESD.Predictor_Base.Predictor.load"]], "load_all_stations() (in module pyesd.esd_utils)": [[6, "pyESD.ESD_utils.load_all_stations"]], "load_csv() (in module pyesd.esd_utils)": [[6, "pyESD.ESD_utils.load_csv"]], "load_pickle() (in module pyesd.esd_utils)": [[6, "pyESD.ESD_utils.load_pickle"]], "load_station() (in module pyesd.stationoperator)": [[6, "pyESD.StationOperator.load_station"]], "map_to_xarray() (in module pyesd.esd_utils)": [[6, "pyESD.ESD_utils.map_to_xarray"]], "max_error() (pyesd.metrics.evaluate method)": [[6, "pyESD.metrics.Evaluate.max_error"]], "module": [[6, "module-pyESD"], [6, "module-pyESD.ESD_utils"], [6, "module-pyESD.MLR_model"], [6, "module-pyESD.Predictor_Base"], [6, "module-pyESD.Predictor_Generator"], [6, "module-pyESD.StationOperator"], [6, "module-pyESD.Weatherstation"], [6, "module-pyESD.dense_models"], [6, "module-pyESD.ensemble_models"], [6, "module-pyESD.feature_selection"], [6, "module-pyESD.metrics"], [6, "module-pyESD.models"], [6, "module-pyESD.plot"], [6, "module-pyESD.plot_utils"], [6, "module-pyESD.predictand"], [6, "module-pyESD.splitter"], [6, "module-pyESD.standardizer"], [6, "module-pyESD.teleconnections"]], "monthly_mean() (in module pyesd.plot_utils)": [[6, "pyESD.plot_utils.monthly_mean"]], "permutation_importance_() (pyesd.feature_selection.treebasedselection method)": [[6, "pyESD.feature_selection.TreeBasedSelection.permutation_importance_"]], "plot() (pyesd.predictor_base.predictor method)": [[6, "pyESD.Predictor_Base.Predictor.plot"]], "plot_background() (in module pyesd.esd_utils)": [[6, "pyESD.ESD_utils.plot_background"]], "plot_cov_matrix() (pyesd.teleconnections.ea method)": [[6, "pyESD.teleconnections.EA.plot_cov_matrix"]], "plot_cov_matrix() (pyesd.teleconnections.eawr method)": [[6, "pyESD.teleconnections.EAWR.plot_cov_matrix"]], "plot_cov_matrix() (pyesd.teleconnections.nao method)": [[6, "pyESD.teleconnections.NAO.plot_cov_matrix"]], "plot_cov_matrix() (pyesd.teleconnections.scan method)": [[6, "pyESD.teleconnections.SCAN.plot_cov_matrix"]], "plot_ks_stats() (in module pyesd.esd_utils)": [[6, "pyESD.ESD_utils.plot_ks_stats"]], "plot_monthly_mean() (in module pyesd.plot)": [[6, "pyESD.plot.plot_monthly_mean"]], "plot_network() (pyesd.dense_models.deeplearningregressor method)": [[6, "pyESD.dense_models.DeepLearningRegressor.plot_network"]], "plot_projection_comparison() (in module pyesd.plot)": [[6, "pyESD.plot.plot_projection_comparison"]], "plot_time_series() (in module pyesd.plot)": [[6, "pyESD.plot.plot_time_series"]], "predict() (pyesd.mlr_model.bootstrappedregression method)": [[6, "pyESD.MLR_model.BootstrappedRegression.predict"]], "predict() (pyesd.mlr_model.forwardselection method)": [[6, "pyESD.MLR_model.ForwardSelection.predict"]], "predict() (pyesd.mlr_model.multiplelsregression method)": [[6, "pyESD.MLR_model.MultipleLSRegression.predict"]], "predict() (pyesd.stationoperator.stationoperator method)": [[6, "pyESD.StationOperator.StationOperator.predict"]], "predict() (pyesd.dense_models.deeplearningregressor method)": [[6, "pyESD.dense_models.DeepLearningRegressor.predict"]], "predict() (pyesd.ensemble_models.ensembleregressor method)": [[6, "pyESD.ensemble_models.EnsembleRegressor.predict"]], "predict() (pyesd.models.regressors method)": [[6, "pyESD.models.Regressors.predict"]], "predict() (pyesd.predictand.predictandtimeseries method)": [[6, "pyESD.predictand.PredictandTimeseries.predict"]], "predict_active() (pyesd.mlr_model.forwardselection method)": [[6, "pyESD.MLR_model.ForwardSelection.predict_active"]], "predict_average() (pyesd.ensemble_models.ensembleregressor method)": [[6, "pyESD.ensemble_models.EnsembleRegressor.predict_average"]], "predict_log_proba() (pyesd.models.hyperparameteroptimize method)": [[6, "pyESD.models.HyperparameterOptimize.predict_log_proba"]], "prediction_example_data() (in module pyesd.plot_utils)": [[6, "pyESD.plot_utils.prediction_example_data"]], "predictor_correlation() (pyesd.stationoperator.stationoperator method)": [[6, "pyESD.StationOperator.StationOperator.predictor_correlation"]], "predictor_correlation() (pyesd.predictand.predictandtimeseries method)": [[6, "pyESD.predictand.PredictandTimeseries.predictor_correlation"]], "print_selected_features() (pyesd.feature_selection.recursivefeatureelimination method)": [[6, "pyESD.feature_selection.RecursiveFeatureElimination.print_selected_features"]], "print_selected_features() (pyesd.feature_selection.sequentialfeatureselection method)": [[6, "pyESD.feature_selection.SequentialFeatureSelection.print_selected_features"]], "print_selected_features() (pyesd.feature_selection.treebasedselection method)": [[6, "pyESD.feature_selection.TreeBasedSelection.print_selected_features"]], "pyesd": [[6, "module-pyESD"]], "pyesd.esd_utils": [[6, "module-pyESD.ESD_utils"]], "pyesd.mlr_model": [[6, "module-pyESD.MLR_model"]], "pyesd.predictor_base": [[6, "module-pyESD.Predictor_Base"]], "pyesd.predictor_generator": [[6, "module-pyESD.Predictor_Generator"]], "pyesd.stationoperator": [[6, "module-pyESD.StationOperator"]], "pyesd.weatherstation": [[6, "module-pyESD.Weatherstation"]], "pyesd.dense_models": [[6, "module-pyESD.dense_models"]], "pyesd.ensemble_models": [[6, "module-pyESD.ensemble_models"]], "pyesd.feature_selection": [[6, "module-pyESD.feature_selection"]], "pyesd.metrics": [[6, "module-pyESD.metrics"]], "pyesd.models": [[6, "module-pyESD.models"]], "pyesd.plot": [[6, "module-pyESD.plot"]], "pyesd.plot_utils": [[6, "module-pyESD.plot_utils"]], "pyesd.predictand": [[6, "module-pyESD.predictand"]], "pyesd.splitter": [[6, "module-pyESD.splitter"]], "pyesd.standardizer": [[6, "module-pyESD.standardizer"]], "pyesd.teleconnections": [[6, "module-pyESD.teleconnections"]], "ranksums_test() (in module pyesd.esd_utils)": [[6, "pyESD.ESD_utils.ranksums_test"]], "read_station_csv() (in module pyesd.weatherstation)": [[6, "pyESD.Weatherstation.read_station_csv"]], "read_weatherstationnames() (in module pyesd.weatherstation)": [[6, "pyESD.Weatherstation.read_weatherstationnames"]], "read_weatherstations() (in module pyesd.weatherstation)": [[6, "pyESD.Weatherstation.read_weatherstations"]], "relative_predictor_importance() (pyesd.stationoperator.stationoperator method)": [[6, "pyESD.StationOperator.StationOperator.relative_predictor_importance"]], "relative_predictor_importance() (pyesd.predictand.predictandtimeseries method)": [[6, "pyESD.predictand.PredictandTimeseries.relative_predictor_importance"]], "remove_seasonal_cycle() (in module pyesd.standardizer)": [[6, "pyESD.standardizer.remove_seasonal_cycle"]], "resample_monthly() (in module pyesd.plot_utils)": [[6, "pyESD.plot_utils.resample_monthly"]], "resample_seasonally() (in module pyesd.plot_utils)": [[6, "pyESD.plot_utils.resample_seasonally"]], "save() (pyesd.predictor_base.predictor method)": [[6, "pyESD.Predictor_Base.Predictor.save"]], "save() (pyesd.stationoperator.stationoperator method)": [[6, "pyESD.StationOperator.StationOperator.save"]], "scatterplot() (in module pyesd.plot)": [[6, "pyESD.plot.scatterplot"]], "score() (pyesd.ensemble_models.ensembleregressor method)": [[6, "pyESD.ensemble_models.EnsembleRegressor.score"]], "score() (pyesd.feature_selection.recursivefeatureelimination method)": [[6, "pyESD.feature_selection.RecursiveFeatureElimination.score"]], "score() (pyesd.feature_selection.sequentialfeatureselection method)": [[6, "pyESD.feature_selection.SequentialFeatureSelection.score"]], "score() (pyesd.models.hyperparameteroptimize method)": [[6, "pyESD.models.HyperparameterOptimize.score"]], "score() (pyesd.models.regressors method)": [[6, "pyESD.models.Regressors.score"]], "seasonal_mean() (in module pyesd.plot_utils)": [[6, "pyESD.plot_utils.seasonal_mean"]], "selected_names() (pyesd.stationoperator.stationoperator method)": [[6, "pyESD.StationOperator.StationOperator.selected_names"]], "selected_names() (pyesd.predictand.predictandtimeseries method)": [[6, "pyESD.predictand.PredictandTimeseries.selected_names"]], "set_additional_results() (pyesd.mlr_model.forwardselection method)": [[6, "pyESD.MLR_model.ForwardSelection.set_additional_results"]], "set_expand_coefs() (pyesd.mlr_model.multiplelsregression method)": [[6, "pyESD.MLR_model.MultipleLSRegression.set_expand_coefs"]], "set_model() (pyesd.stationoperator.stationoperator method)": [[6, "pyESD.StationOperator.StationOperator.set_model"]], "set_model() (pyesd.models.regressors method)": [[6, "pyESD.models.Regressors.set_model"]], "set_model() (pyesd.predictand.predictandtimeseries method)": [[6, "pyESD.predictand.PredictandTimeseries.set_model"]], "set_params() (pyesd.models.metaattributes method)": [[6, "pyESD.models.MetaAttributes.set_params"]], "set_predictors() (pyesd.stationoperator.stationoperator method)": [[6, "pyESD.StationOperator.StationOperator.set_predictors"]], "set_predictors() (pyesd.predictand.predictandtimeseries method)": [[6, "pyESD.predictand.PredictandTimeseries.set_predictors"]], "set_standardizer() (pyesd.stationoperator.stationoperator method)": [[6, "pyESD.StationOperator.StationOperator.set_standardizer"]], "set_standardizer() (pyesd.predictand.predictandtimeseries method)": [[6, "pyESD.predictand.PredictandTimeseries.set_standardizer"]], "set_transform() (pyesd.stationoperator.stationoperator method)": [[6, "pyESD.StationOperator.StationOperator.set_transform"]], "set_transform() (pyesd.predictand.predictandtimeseries method)": [[6, "pyESD.predictand.PredictandTimeseries.set_transform"]], "split() (pyesd.splitter.monthlybooststrapper method)": [[6, "pyESD.splitter.MonthlyBooststrapper.split"]], "split() (pyesd.splitter.splitter method)": [[6, "pyESD.splitter.Splitter.split"]], "split() (pyesd.splitter.yearlybootstrapper method)": [[6, "pyESD.splitter.YearlyBootstrapper.split"]], "store_csv() (in module pyesd.esd_utils)": [[6, "pyESD.ESD_utils.store_csv"]], "store_pickle() (in module pyesd.esd_utils)": [[6, "pyESD.ESD_utils.store_pickle"]], "transform() (pyesd.ensemble_models.ensembleregressor method)": [[6, "pyESD.ensemble_models.EnsembleRegressor.transform"]], "transform() (pyesd.feature_selection.recursivefeatureelimination method)": [[6, "pyESD.feature_selection.RecursiveFeatureElimination.transform"]], "transform() (pyesd.feature_selection.sequentialfeatureselection method)": [[6, "pyESD.feature_selection.SequentialFeatureSelection.transform"]], "transform() (pyesd.feature_selection.treebasedselection method)": [[6, "pyESD.feature_selection.TreeBasedSelection.transform"]], "transform() (pyesd.models.hyperparameteroptimize method)": [[6, "pyESD.models.HyperparameterOptimize.transform"]], "transform() (pyesd.standardizer.monthlystandardizer method)": [[6, "pyESD.standardizer.MonthlyStandardizer.transform"]], "transform() (pyesd.standardizer.nostandardizer method)": [[6, "pyESD.standardizer.NoStandardizer.transform"]], "transform() (pyesd.standardizer.pcascaling method)": [[6, "pyESD.standardizer.PCAScaling.transform"]], "transform() (pyesd.standardizer.standardscaling method)": [[6, "pyESD.standardizer.StandardScaling.transform"]], "tree_based_feature_importance() (pyesd.stationoperator.stationoperator method)": [[6, "pyESD.StationOperator.StationOperator.tree_based_feature_importance"]], "tree_based_feature_importance() (pyesd.predictand.predictandtimeseries method)": [[6, "pyESD.predictand.PredictandTimeseries.tree_based_feature_importance"]], "tree_based_feature_permutation_importance() (pyesd.stationoperator.stationoperator method)": [[6, "pyESD.StationOperator.StationOperator.tree_based_feature_permutation_importance"]], "tree_based_feature_permutation_importance() (pyesd.predictand.predictandtimeseries method)": [[6, "pyESD.predictand.PredictandTimeseries.tree_based_feature_permutation_importance"]]}})