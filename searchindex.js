Search.setIndex({"docnames": ["examples", "gallery", "index", "installation", "methods", "modules", "overview", "pyESD", "testing", "tutorials"], "filenames": ["examples.rst", "gallery.rst", "index.rst", "installation.rst", "methods.rst", "modules.rst", "overview.rst", "pyESD.rst", "testing.rst", "tutorials.rst"], "titles": ["Practical examples", "Gallery", "Akwaaba! Welcome to PyESD Documentation!", "Installation", "Methods", "API Reference", "Overview", "pyESD package", "Testing", "Using pyESD for Downscaling Climate Information"], "terms": {"The": [0, 2, 3, 4, 6, 7, 8, 9], "packag": [0, 2, 3, 5, 6, 8, 9], "ha": [0, 2, 3, 6, 7], "been": [0, 2, 6], "demonstr": [0, 9], "real": 0, "word": 0, "observ": [0, 2, 6], "dataset": [0, 2, 3, 5, 6, 7], "In": [0, 7, 9], "thi": [0, 2, 3, 4, 5, 6, 7, 9], "we": [0, 2, 6, 9], "show": [0, 4, 9], "model": [0, 2, 3, 5, 6], "routin": [0, 2, 3, 6, 7, 9], "follow": [0, 3, 4, 7, 9], "product": [0, 2, 4, 6], "control": 0, "script": [0, 8, 9], "individu": [0, 2], "step": [0, 2, 3, 4, 6, 7, 9], "can": [0, 3, 4, 7, 9], "found": [0, 2, 6, 8], "folder": [0, 3, 7, 8], "all": [0, 2, 6, 7, 9], "data": [0, 2, 3, 4, 6, 7, 8], "i": [0, 3, 4, 5, 7, 8, 9], "publicli": 0, "avail": [0, 7, 9], "project": [0, 2, 6], "reli": [0, 2, 6], "non": [0, 7], "open": [0, 2, 6], "access": 0, "collect": [0, 1], "from": [0, 2, 5, 6, 7, 9], "meteorologi": 0, "agenc": [0, 2, 6], "gmet": 0, "regressor": [0, 2, 5, 6, 7], "improv": [0, 2, 6, 7], "perform": [0, 2, 6, 7, 9], "transfer": [0, 2, 4, 6], "function": [0, 2, 4, 6, 7], "requir": [0, 2, 3, 4, 5, 6, 7, 9], "monthli": [0, 7], "rainfal": [0, 2, 6], "ar": [0, 2, 4, 6, 7, 8, 9], "pleas": [0, 2, 4, 6, 7], "note": [0, 2, 4, 6, 7], "page": [0, 2, 4, 6], "under": [0, 2, 4, 5, 6, 7], "activ": [0, 2, 4, 5, 6, 7], "delop": [0, 4], "would": [0, 2, 3, 5, 6, 7, 8], "benefit": [0, 5], "its": [0, 2, 3, 5, 6, 7, 9], "extens": [0, 5], "thank": [0, 2, 4, 6], "understand": [0, 2, 3, 4, 6], "amaz": 1, "thing": 1, "scienc": [1, 2, 6], "done": [1, 7], "pyesd": [1, 3, 5], "python": [2, 6], "framwork": 2, "empir": [2, 6], "statist": [2, 6, 7], "an": [2, 3, 6, 7], "sourc": [2, 6, 7, 9], "framework": [2, 6], "approach": 2, "ani": [2, 3, 6, 9], "climat": [2, 6, 7], "relat": 2, "variabl": [2, 6, 7, 9], "precipit": [2, 7, 9], "temperatur": [2, 7], "wind": 2, "speed": 2, "reanalysi": [2, 6, 9], "eg": [2, 7], "era5": [2, 6, 7, 9], "predictor": [2, 4, 5, 6, 7], "featur": [2, 6], "cycl": [2, 7], "includ": [2, 3, 6], "preprocess": [2, 6, 7], "select": [2, 4, 6, 7], "construct": [2, 4, 6], "transform": [2, 5, 6, 7], "train": [2, 4, 6, 7, 9], "valid": [2, 7, 8], "evalu": [2, 4, 5, 7], "futur": [2, 6, 7], "predict": [2, 5, 6, 7], "serv": 2, "mean": [2, 7, 9], "gener": [2, 4, 6, 7, 8], "circul": [2, 6, 9], "high": 2, "resolut": [2, 6], "relev": [2, 6, 9], "impact": [2, 6], "assess": [2, 6], "drought": 2, "flood": 2, "wildfir": 2, "risk": [2, 7], "other": [2, 6, 7], "main": 2, "specialti": 2, "well": [2, 6], "design": [2, 6, 7, 9], "oop": 2, "style": [2, 7], "consid": [2, 6, 9], "weather": [2, 6, 9], "station": [2, 4, 6, 7, 9], "object": [2, 6, 7, 9], "attribut": [2, 7, 9], "ensur": 2, "fewer": 2, "line": 2, "code": [2, 6, 7, 9], "cover": [2, 9], "end": 2, "chang": [2, 6], "mani": [2, 6], "machin": [2, 6], "learn": [2, 3, 4, 6, 7], "algorithm": [2, 6, 7], "techniqu": [2, 6, 9], "experi": [2, 6, 9], "toward": 2, "robust": [2, 7], "coupl": [2, 4], "gcm": [2, 4, 6], "estim": [2, 7], "And": 2, "highlight": [2, 4], "descript": [2, 7], "submit": [2, 6], "gmd": [2, 6], "inform": [2, 3, 6, 7], "crucial": [2, 6, 9], "becaus": [2, 6], "widespread": [2, 6], "divers": [2, 6], "effect": [2, 6], "human": [2, 6], "caus": [2, 6], "To": [2, 6, 9], "better": [2, 6, 7], "essenti": [2, 6], "accur": [2, 6], "about": [2, 3, 6], "condit": [2, 6], "scale": [2, 3, 6, 7], "studi": [2, 6], "creat": [2, 3, 6, 7], "strategi": [2, 6], "address": [2, 6], "them": [2, 6, 7, 9], "physic": [2, 6], "base": [2, 4, 6, 7, 9], "numer": [2, 6], "pattern": [2, 6], "differ": [2, 6, 7, 9], "assumpt": [2, 6], "radi": [2, 6], "forc": [2, 6], "howev": [2, 3, 6, 7], "thei": [2, 6, 7], "limit": [2, 6], "while": [2, 6], "replic": [2, 6], "current": [2, 6, 7], "past": [2, 6], "atmospher": [2, 6, 9], "process": [2, 3, 6, 7, 9], "larg": [2, 3, 6], "struggl": [2, 6], "repres": [2, 6], "smaller": [2, 6], "like": [2, 6, 7], "local": [2, 6, 9], "cloud": [2, 6], "certain": [2, 6], "due": [2, 6, 9], "coars": [2, 6], "addition": [2, 6, 7, 9], "adequ": [2, 6], "captur": [2, 6], "region": [2, 6], "variat": [2, 6], "overcom": [2, 6], "simul": [2, 6], "need": [2, 3, 6, 7, 9], "allow": [2, 6], "more": [2, 3, 6, 7], "fall": [2, 6, 7], "two": [2, 6, 7], "categori": [2, 6], "output": [2, 6, 7], "mo": [2, 6], "pp": [2, 6], "directli": [2, 6, 7], "bia": [2, 6], "correct": [2, 6], "": [2, 3, 6, 7, 9], "inflex": [2, 6], "ti": [2, 6], "specif": [2, 3, 6, 7], "On": [2, 6], "hand": [2, 6], "esd": [2, 6, 7], "connect": [2, 6], "establish": [2, 6], "relationship": [2, 6], "between": [2, 6, 7], "larger": [2, 6], "act": [2, 6], "complex": [2, 6, 9], "substanti": [2, 6], "offer": [2, 6, 9], "flexibl": [2, 6], "work": [2, 6, 7], "variou": [2, 6, 8, 9], "tool": [2, 6], "It": [2, 3, 6, 7], "e": [2, 3, 6, 7], "g": [2, 6, 7], "german": [2, 6], "servic": [2, 6], "ghana": [2, 6], "met": [2, 6], "analysi": [2, 6, 7], "cmip5": [2, 6], "cmip6": [2, 6], "predictand": [2, 5, 6, 9], "extract": [2, 6, 7, 9], "teleconnect": [2, 5, 6], "engin": [2, 6], "choos": [2, 6, 9], "ensembl": [2, 6, 7], "provid": [2, 3, 6, 7, 9], "visual": [2, 3, 6], "adapt": [2, 6, 9], "user": [2, 6, 9], "friendli": [2, 6], "For": [2, 3, 6, 9], "given": [2, 6, 7], "directori": [2, 6, 7], "load": [2, 5, 6, 7, 9], "oper": [2, 6, 7], "so": [2, 6, 7], "appli": [2, 6], "exampl": [2, 4, 6, 7, 9], "set": [2, 3, 6, 7, 9], "weatherst": [2, 6, 7], "read_station_csv": [2, 5, 6, 7], "standard": [2, 3, 5, 6], "monthlystandard": [2, 5, 6, 7], "standardsc": [2, 5, 6, 7], "filenam": [2, 6, 7], "station_dir": [2, 6], "varnam": [2, 6, 7, 9], "set_model": [2, 5, 6, 7], "method": [2, 6, 7, 9], "score": [2, 5, 6, 7], "cv": [2, 6, 7], "timeseriessplit": [2, 6], "n_split": [2, 6, 7], "10": [2, 6, 7], "detail": [2, 3, 6, 9], "version": [2, 3, 6, 7, 8], "doesn": [2, 6, 7], "spatial": [2, 6], "grid": [2, 6], "lack": [2, 6], "capabl": [2, 6, 9], "heavili": [2, 6], "simpl": [2, 6, 9], "deep": [2, 6, 7], "architectur": [2, 6], "daili": [2, 6], "still": [2, 6], "experiment": [2, 6], "instanc": [2, 6], "possibl": [2, 6, 7], "classifi": [2, 6], "within": [2, 6, 9], "wet": [2, 6], "dry": [2, 6], "befor": [2, 6], "occurr": [2, 6], "extrem": [2, 6], "event": [2, 6], "pre": [2, 6], "handl": [2, 6, 7], "format": [2, 6, 9], "easili": [2, 6, 9], "suggest": [2, 6], "softwar": [2, 6], "wa": [2, 6, 7], "daniel": [2, 6, 7], "boateng": [2, 6, 7], "ph": [2, 6], "d": [2, 6], "student": [2, 6], "univers": [2, 6], "t\u00fcbingen": [2, 6], "alongsid": [2, 6], "hi": [2, 6], "involv": [2, 6], "paleoclim": [2, 6], "isotop": [2, 6], "enabl": [2, 6], "dynam": [2, 6], "he": [2, 6], "dedic": [2, 6], "scientif": [2, 6], "aim": [2, 6], "enhanc": [2, 6, 9], "reproduc": [2, 6], "research": [2, 6, 7], "outcom": [2, 6], "believ": [2, 6], "fun": [2, 6], "were": [2, 6, 7], "also": [2, 6, 7], "pyclimat": [2, 6], "anoth": [2, 6], "analyz": [2, 6, 9], "which": [2, 6, 7, 9], "sinc": [2, 6, 7], "first": [2, 3, 6, 7], "dai": [2, 6], "program": [2, 6], "trust": [2, 6], "ttp": [2, 6], "aspect": [2, 6], "life": [2, 6], "If": [2, 3, 6, 7], "you": [2, 3, 6, 7, 9], "re": [2, 6, 7], "interest": [2, 6], "your": [2, 3, 6, 7], "ve": [2, 6], "made": [2, 6], "sure": [2, 6], "applic": [2, 6], "worldwid": [2, 6], "whether": [2, 6, 7], "new": [2, 3, 6, 7], "help": [2, 6, 9], "start": [2, 6, 7, 9], "want": [2, 6], "add": [2, 6, 7], "compon": [2, 6], "bug": [2, 6, 7], "simpli": [2, 6], "discuss": [2, 6], "potenti": [2, 6], "collabor": [2, 6], "sever": [2, 6], "wai": [2, 6, 7], "reach": [2, 6], "out": [2, 6], "1": [2, 6, 7], "question": [2, 6], "behind": [2, 6], "our": [2, 6, 9], "assist": [2, 6, 7, 9], "up": [2, 3, 6], "look": [2, 6], "might": [2, 6, 7], "fulli": [2, 6], "initi": [2, 6, 7, 9], "_discuss": [2, 6], "github": [2, 6], "2": [2, 6, 7], "report": [2, 6], "issu": [2, 6, 9], "encount": [2, 6], "feel": [2, 6], "miss": [2, 6], "repositori": [2, 6], "http": [2, 6], "com": [2, 3, 6], "dan": [2, 3, 6], "boat": [2, 3, 6], "contribut": [2, 6], "email": [2, 6], "free": [2, 6], "via": [2, 6], "dannboateng": [2, 6], "gmail": [2, 6], "alwai": [2, 6, 9], "thrill": [2, 6], "hear": [2, 6], "being": [2, 6], "util": [2, 6, 7, 9], "incorpor": [2, 6, 9], "teach": [2, 6], "pull": [2, 6], "request": [2, 6], "let": [2, 6, 9], "know": [2, 6, 9], "keep": [2, 3, 6], "track": [2, 6], "endeavor": [2, 6], "kindli": [2, 6], "make": [2, 6, 9], "mutz": [2, 6], "pyesdv1": [2, 6], "0": [2, 6, 7], "geoscientif": [2, 6], "58": [2, 6, 7], "doi": [2, 6], "org": [2, 6], "5194": [2, 6], "2023": [2, 6], "67": [2, 6], "arthur": [2, 6], "f": [2, 6], "baidu": [2, 6], "m": [2, 6, 9], "respons": [2, 6], "21st": [2, 6], "centuri": [2, 6], "2022": [2, 6, 7, 9], "h25a": [2, 6], "04": [2, 6], "cite": [2, 6], "bibtex": [2, 6], "articl": [2, 6], "boateng_pyesdv101_2023": [2, 6], "titl": [2, 6, 7], "shorttitl": [2, 6], "url": [2, 6], "copernicu": [2, 6, 9], "languag": [2, 6], "english": [2, 6], "urldat": [2, 6], "07": [2, 6], "24": [2, 6], "journal": [2, 6], "author": [2, 6, 7], "sebastian": [2, 6], "month": [2, 6, 7], "apr": [2, 6, 7], "year": [2, 6, 7, 9], "publish": [2, 6], "gmbh": [2, 6], "file": [2, 6, 7], "full": [2, 6], "text": [2, 6], "pdf": [2, 6], "danielboateng": [2, 6], "zotero": [2, 6], "storag": [2, 6], "89jhu897": [2, 6], "overview": 2, "instal": 2, "doc": 2, "galleri": 2, "mit": 2, "copyright": 2, "c": [2, 3, 9], "index": [2, 7], "modul": [2, 3, 5, 9], "search": 2, "intal": 3, "pip": 3, "same": [3, 7], "edit": 3, "mode": 3, "flag": [3, 8], "updat": 3, "develop": [3, 4, 5, 7], "clone": 3, "git": 3, "recommend": [3, 7], "isol": 3, "environ": 3, "virtualenv": 3, "conda": 3, "us": [3, 4, 7, 8], "some": [3, 7, 9], "through": [3, 7], "distro": 3, "fail": 3, "manual": 3, "cartopi": 3, "bit": 3, "challeng": 3, "plan": 3, "mind": 3, "necessari": [3, 7], "downscal": [3, 4, 7], "here": [3, 4, 7, 9], "guid": 3, "name": [3, 7, 9], "cartopy_env": 3, "onc": 3, "forg": 3, "channel": 3, "when": 3, "env_nam": 3, "previous": [3, 7], "system": 3, "how": [3, 7], "refer": [3, 7, 9], "websit": 3, "document": [3, 6, 9], "comprehens": [3, 9], "setup": 3, "sklearn": [3, 7], "u": [3, 9], "scikit": 3, "xarrai": [3, 7], "dask": 3, "netcdf4": 3, "bottleneck": 3, "panda": [3, 7], "seaborn": [3, 7], "tensorflow": 3, "matplotlib": [3, 7], "eof": 3, "option": [3, 7], "xgboost": 3, "optim": [3, 7], "outlin": [4, 7], "typic": [4, 9], "prepar": 4, "submodul": 5, "esd_util": 5, "computestat": [5, 7], "get": [5, 7, 9], "midpointnorm": [5, 7], "stackarrai": [5, 7], "stattest": [5, 7], "_get_month": [5, 7], "extract_indices_around": [5, 7], "extract_region": [5, 7], "haversin": [5, 7], "levene_test": [5, 7], "load_all_st": [5, 7], "load_csv": [5, 7], "load_pickl": [5, 7], "map_to_xarrai": [5, 7], "plot_background": [5, 7], "plot_ks_stat": [5, 7], "ranksums_test": [5, 7], "store_csv": [5, 7], "store_pickl": [5, 7], "predictor_bas": 5, "fit": [5, 7], "plot": 5, "save": [5, 7], "predictor_gener": 5, "regionalaverag": [5, 7], "stationoper": 5, "climate_scor": [5, 7], "cross_validate_and_predict": [5, 7], "ensemble_transform": [5, 7], "fit_predictor": [5, 7], "get_explained_vari": [5, 7], "get_var": [5, 7], "predictor_correl": [5, 7], "relative_predictor_import": [5, 7], "selected_nam": [5, 7], "set_predictor": [5, 7], "set_standard": [5, 7], "set_transform": [5, 7], "tree_based_feature_import": [5, 7], "tree_based_feature_permutation_import": [5, 7], "load_stat": [5, 7], "weatherstationpreprocess": 5, "read_weatherstationnam": [5, 7], "read_weatherst": [5, 7], "dense_model": 5, "deeplearningregressor": [5, 7], "build_model": [5, 7], "compile_model": [5, 7], "convert_to_sklearn_regressor": [5, 7], "plot_network": [5, 7], "ensemble_model": 5, "ensembleregressor": [5, 7], "cross_val_predict": [5, 7], "cross_val_scor": [5, 7], "cross_valid": [5, 7], "get_param": [5, 7], "predict_averag": [5, 7], "feature_select": 5, "recursivefeatureelimin": [5, 7], "cv_test_scor": [5, 7], "print_selected_featur": [5, 7], "sequentialfeatureselect": [5, 7], "treebasedselect": [5, 7], "feature_import": [5, 7], "permutation_importance_": [5, 7], "metric": 5, "mae": [5, 7], "mse": [5, 7], "nse": [5, 7], "r2_score": [5, 7], "rmse": [5, 7], "adjusted_r2": [5, 7], "explained_vari": [5, 7], "max_error": [5, 7], "hyperparameteroptim": [5, 7], "best_estim": [5, 7], "predict_log_proba": [5, 7], "metaattribut": [5, 7], "alpha": [5, 7], "best_param": [5, 7], "coef": [5, 7], "intercept": [5, 7], "set_param": [5, 7], "barplot": [5, 7], "boxplot": [5, 7], "correlation_heatmap": [5, 7], "heatmap": [5, 7], "lineplot": [5, 7], "plot_monthly_mean": [5, 7], "plot_projection_comparison": [5, 7], "plot_time_seri": [5, 7], "scatterplot": [5, 7], "plot_util": 5, "apply_styl": [5, 7], "barplot_data": [5, 7], "boxplot_data": [5, 7], "correlation_data": [5, 7], "count_predictor": [5, 7], "extract_comparison_data_mean": [5, 7], "extract_time_seri": [5, 7], "monthly_mean": [5, 7], "prediction_example_data": [5, 7], "resample_monthli": [5, 7], "resample_season": [5, 7], "seasonal_mean": [5, 7], "predictandtimeseri": [5, 7], "splitter": 5, "monthlybooststrapp": [5, 7], "split": [5, 7], "get_n_split": [5, 7], "yearlybootstrapp": [5, 7], "inverse_transform": [5, 7], "nostandard": [5, 7], "pcascal": [5, 7], "fit_transform": [5, 7], "add_seasonal_cycl": [5, 7], "get_annual_mean_cycl": [5, 7], "get_mean_predict": [5, 7], "remove_seasonal_cycl": [5, 7], "ea": [5, 7], "plot_cov_matrix": [5, 7], "eawr": [5, 7], "mei": [5, 7], "nao": [5, 7], "scan": [5, 7], "eof_analysi": [5, 7], "data_preprocessing_util": 5, "mlr": 5, "bootstrappedforwardselect": [5, 7], "bootstrappedregress": [5, 7], "fit_predict": [5, 7], "forwardselect": [5, 7], "average_additional_result": [5, 7], "average_coef": [5, 7], "fit_act": [5, 7], "predict_act": [5, 7], "set_additional_result": [5, 7], "multiplelsregress": [5, 7], "set_expand_coef": [5, 7], "_get_act": [5, 7], "content": 5, "upgrad": 5, "indic": [6, 7], "welcom": 6, "fri": 7, "nov": 7, "12": [7, 9], "14": 7, "02": 7, "28": 7, "2021": 7, "dboateng": [7, 9], "contian": 7, "class": 7, "sx": 7, "y": 7, "sy": [7, 9], "test": 7, "return_scor": 7, "true": 7, "part": 7, "parmap": 7, "map": 7, "independ": 7, "domain_nam": 7, "select_domain": 7, "is_dataset": 7, "fals": 7, "vmin": 7, "none": 7, "vmax": 7, "midpoint": 7, "clip": 7, "normal": 7, "At": 7, "moment": 7, "diverg": 7, "colormap": 7, "colorbar": 7, "rang": 7, "zero": 7, "both": [7, 9], "magnitud": 7, "color": 7, "offsetnorm": 7, "origin": 7, "joe": 7, "kingto": 7, "modifi": [7, 8], "bar": 7, "divid": 7, "5": [7, 9], "own": 7, "practic": [7, 9], "quantit": 7, "paramet": 7, "float": 7, "minimum": 7, "maximum": 7, "valu": [7, 9], "respect": 7, "input": 7, "__call__": 7, "A": 7, "call": 7, "autoscale_non": 7, "bool": 7, "default": 7, "outsid": [7, 9], "whichev": 7, "closer": [7, 9], "mask": 7, "remain": 7, "silent": 7, "defeat": 7, "purpos": 7, "over": [7, 9], "lead": 7, "surpris": 7, "therefor": 7, "return": 7, "x": 7, "dim": 7, "stack": 7, "arrai": 7, "onli": [7, 9], "one": [7, 9], "dimens": 7, "left": 7, "dataarrai": 7, "sole": 7, "after": 7, "parallel": 7, "comput": 7, "signific": 7, "xr": 7, "along": 7, "p": 7, "have": [7, 9], "except": 7, "scalar": 7, "against": [7, 9], "Or": 7, "singl": 7, "sign": 7, "k": 7, "kolmogorov": 7, "smirnov": 7, "mw": 7, "mann": 7, "whitnei": 7, "wc": 7, "wilcoxon": 7, "t": 7, "sampl": 7, "run": [7, 8], "pvalx": 7, "contain": [7, 9], "npdatetime64": 7, "januari": 7, "februari": 7, "lat": 7, "lon": 7, "radiu": [7, 9], "datarang": 7, "minlat": 7, "maxlat": 7, "minlon": 7, "maxlon": 7, "lon1": 7, "lat1": 7, "lon2": 7, "lat2": 7, "path": [7, 9], "stationnam": 7, "assum": 7, "store": 7, "quantiti": 7, "dictionari": 7, "datarrai": 7, "domain": [7, 9], "ax": 7, "left_label": 7, "bottom_label": 7, "plot_coastlin": 7, "plot_bord": 7, "funtion": 7, "defin": [7, 9], "specifi": [7, 9], "background": 7, "imshow": 7, "argument": 7, "param": 7, "type": 7, "domian": 7, "str": 7, "south": 7, "america": 7, "alaska": 7, "tibet": 7, "plateau": 7, "himalaya": 7, "eurosia": 7, "zealand": 7, "global": [7, 9], "cmap": 7, "level": [7, 8], "center": [7, 9], "output_nam": 7, "output_format": 7, "level_tick": 7, "path_to_stor": [7, 9], "add_colorbar": 7, "hatch": 7, "fig": 7, "cbar_po": 7, "use_colorbar_default": 7, "orient": 7, "horizont": 7, "plot_project": 7, "plot_stat": 7, "stats_result": 7, "var": 7, "cachedir": 7, "45": 7, "longnam": 7, "abc": 7, "daterang": 7, "regener": 7, "patterns_from": 7, "params_from": 7, "plot_kwarg": 7, "03": 7, "09": 7, "standardizer_constructor": 7, "250": 7, "kwarg": 7, "sun": 7, "21": 7, "00": 7, "55": 7, "37": 7, "elev": [7, 9], "fit_period": 7, "score_period": 7, "predictor_dataset": 7, "predictor_kwarg": 7, "calcul": 7, "string": 7, "pd": 7, "datetimeindex": 7, "should": [7, 9], "stat_downscaling_tool": 7, "keyword": 7, "These": [7, 9], "pass": 7, "cscore": 7, "similar": 7, "rho": 7, "squar": 7, "perfect": 7, "skill": [7, 9], "neg": 7, "even": 7, "wors": 7, "than": 7, "doubl": 7, "fit_predictand": 7, "return_cv_scor": 7, "predictor_selector": 7, "selector_method": 7, "recurs": 7, "selector_regressor": 7, "ridg": 7, "num_predictor": 7, "selector_direct": 7, "cal_relative_import": 7, "imput": 7, "impute_method": 7, "impute_ord": 7, "otherwis": 7, "anomali": 7, "pearson": 7, "use_scipi": 7, "fname": 7, "pickl": 7, "where": 7, "self": 7, "replac": 7, "_": [7, 9], "ensemble_learn": 7, "final_estimator_nam": 7, "r2": 7, "neg_root_mean_squared_error": 7, "detrend": 7, "01": [7, 9], "43": 7, "download": [7, 9], "dwd": [7, 9], "time": 7, "seri": 7, "frequenc": 7, "must": [7, 9], "number": 7, "write": 7, "addit": 7, "separ": 7, "3": 7, "read": [7, 9], "downlod": 7, "contact": 7, "uni": 7, "tuebingen": 7, "de": 7, "return_al": 7, "varibal": 7, "rais": 7, "valueerror": 7, "w": 7, "path_to_data": [7, 9], "namedict": 7, "dict": 7, "rel": 7, "absolut": 7, "wed": 7, "mar": 7, "16": 7, "26": 7, "further": [7, 9], "adam": 7, "loss": 7, "mean_squared_error": 7, "rootmeansquarederror": 7, "epoch": 7, "1000": 7, "verbos": [7, 8], "mon": 7, "11": 7, "35": 7, "n_job": 7, "passthrough": 7, "jan": 7, "17": 7, "18": 7, "regressor_nam": 7, "ard": 7, "n_featur": 7, "direct": 7, "forward": 7, "randomforest": 7, "34": 7, "25": 7, "y_true": 7, "y_pred": 7, "thu": 7, "param_grid": 7, "hyper_method": 7, "xlabel": 7, "ylabel": 7, "test_r2": 7, "varname_std": 7, "test_r2_std": 7, "validation_score_": 7, "legend": 7, "fig_path": 7, "fig_nam": 7, "show_error": 7, "width": 7, "rot": 7, "patch_artist": 7, "cbar_ax": 7, "add_cbar": 7, "label": 7, "correl": 7, "coefficinet": 7, "cbar": 7, "station_num": 7, "obs_train_nam": 7, "ob": 7, "1958": [7, 9], "2010": 7, "obs_test_nam": 7, "2011": 7, "2020": 7, "val_predict_nam": 7, "test_predict_nam": 7, "std": 7, "lolim": 7, "id_nam": 7, "stationloc_dir": 7, "dataset_varnam": 7, "figpath": 7, "fignam": 7, "use_id": 7, "ymax": 7, "ymin": 7, "window": 7, "49": 7, "fontsiz": 7, "20": 7, "linewidth": 7, "bmh": 7, "fivethirtyeight": 7, "use_cv_al": 7, "22": 7, "much": 7, "period": 7, "annual": 7, "mlr_learn": 7, "tue": 7, "52": 7, "13": 7, "500": 7, "test_siz": 7, "block_siz": 7, "group": 7, "num_block": 7, "num_sampl": 7, "n_block": 7, "shuffl": 7, "3333333333333333": 7, "min_month_per_year": 7, "9": 7, "pick": 7, "complet": [7, 9], "yb": 7, "enumer": 7, "x_train": 7, "y_train": 7, "iloc": 7, "x_test": 7, "y_test": 7, "int": 7, "ratio": 7, "pair": 7, "datafram": 7, "dummi": 7, "baseestim": 7, "transformermixin": 7, "season": 7, "possibli": 7, "linear": 7, "trend": 7, "affect": 7, "remov": 7, "subtract": 7, "regress": 7, "afterward": 7, "varianc": 7, "hold": 7, "Not": 7, "x_unstandard": 7, "unstandard": 7, "x_transform": 7, "just": 7, "doe": 7, "noth": 7, "n_compon": 7, "kernel": 7, "fit_param": 7, "shape": 7, "n_sampl": 7, "n_output": 7, "target": 7, "unsupervis": 7, "x_new": 7, "ndarrai": 7, "n_features_new": 7, "with_std": 7, "with_mean": 7, "unit_vari": 7, "norm": 7, "l2": 7, "mean_seasonal_cycl": 7, "numpi": 7, "column": 7, "each": [7, 9], "invers": 7, "59": 7, "neof": 7, "eof_packag": 7, "apply_equal_wtg": 7, "pcscale": 7, "7": 7, "48": 7, "There": 7, "three": 7, "layer": 7, "bootstrap": 7, "outer": 7, "implement": [7, 9], "loop": 7, "member": 7, "lasso": 7, "next": 7, "again": 7, "get_coef": 7, "set_coef": 7, "mlr_model": 7, "min_explained_vari": 7, "easi": 7, "interfac": 7, "furthermor": 7, "below": 7, "inclus": 7, "stage": 7, "explain": [7, 9], "least": 7, "amount": 7, "stop": 7, "integ": 7, "cross": 7, "determin": [7, 9], "fold": 7, "n": 7, "some_object": 7, "metaestim": 7, "multipl": 7, "final": 7, "averag": 7, "linearmodel": 7, "coef_": 7, "intercept_": 7, "someth": 7, "els": 7, "arithmet": 7, "taken": 7, "everyth": 7, "inherit": 7, "extent": 7, "interchangibli": 7, "list_of_coef": 7, "additional_result": 7, "dure": 7, "case": 7, "list_of_dict": 7, "mean_additional_result": 7, "mean_coef": 7, "depend": [7, 9], "coeffici": 7, "nonzero": 7, "cv_error": 7, "error": 7, "stepwis": 7, "most": 7, "promis": 7, "candid": 7, "good": 7, "enough": 7, "von": 7, "storch": 7, "1999": 7, "intend": 7, "explaned_vari": 7, "list_of_param": 7, "accord": 7, "yhat": 7, "inact": 7, "uncertainti": 7, "deviat": 7, "lowest": 7, "abort": 7, "previou": 7, "row": [7, 9], "length": 7, "exp_var": 7, "whose": 7, "add_result": 7, "linearcoefshandlermixin": 7, "ol": 7, "n_predictor": 7, "often": 7, "expand": 7, "matrix": 7, "x_activ": 7, "abou": 7, "metadata": 7, "synthet": 8, "locat": 8, "v": 8, "higher": 8, "section": 9, "focu": 9, "record": 9, "southern": 9, "germani": 9, "randomli": 9, "pool": 9, "1500": 9, "post": 9, "correspond": 9, "achiev": 9, "result": 9, "showcas": 9, "form": 9, "jupyt": 9, "notebook": 9, "instruct": 9, "explan": 9, "cdc": 9, "import": 9, "o": 9, "data_preprocess_util": 9, "extract_dwddata_with_more_yr": 9, "add_info_to_data": 9, "raw": 9, "main_path": 9, "desktop": 9, "southern_germani": 9, "data_files_path": 9, "join": 9, "path_data_consid": 9, "path_data_process": 9, "path_data_info": 9, "sdo_obs_deu_p1m_rr": 9, "csv": 9, "exist": 9, "makedir": 9, "meet": 9, "60": 9, "min_yr": 9, "glob_nam": 9, "start_dat": 9, "end_dat": 9, "data_freq": 9, "path_to_info": 9, "take": 9, "structur": 9, "longitud": 9, "latitud": 9, "sixth": 9, "onward": 9, "ll": 9, "find": 9, "date": 9, "compat": 9, "regard": 9, "200km": 9, "conveni": 9, "opt": 9, "although": 9, "mandatori": 9, "read_data": 9, "py": 9, "illustr": 9, "total": 9, "tp": 9, "throughout": 9, "tutori": 9, "multitud": 9, "mai": 9, "judici": 9, "meaning": 9, "interpret": 9, "straightforward": 9, "compar": 9, "baselin": 9, "ridgecv": 9, "identifi": 9, "highest": 9, "chosen": 9, "One": 9, "notabl": 9, "advantag": 9, "abil": 9, "plai": 9, "role": 9, "cool": 9}, "objects": {"": [[7, 0, 0, "-", "pyESD"]], "pyESD": [[7, 0, 0, "-", "ESD_utils"], [7, 0, 0, "-", "MLR_model"], [7, 0, 0, "-", "Predictor_Base"], [7, 0, 0, "-", "Predictor_Generator"], [7, 0, 0, "-", "StationOperator"], [7, 0, 0, "-", "Weatherstation"], [7, 0, 0, "-", "dense_models"], [7, 0, 0, "-", "ensemble_models"], [7, 0, 0, "-", "feature_selection"], [7, 0, 0, "-", "metrics"], [7, 0, 0, "-", "models"], [7, 0, 0, "-", "plot"], [7, 0, 0, "-", "plot_utils"], [7, 0, 0, "-", "predictand"], [7, 0, 0, "-", "splitter"], [7, 0, 0, "-", "standardizer"], [7, 0, 0, "-", "teleconnections"]], "pyESD.ESD_utils": [[7, 1, 1, "", "ComputeStat"], [7, 2, 1, "", "Dataset"], [7, 2, 1, "", "MidpointNormalize"], [7, 1, 1, "", "StackArray"], [7, 1, 1, "", "StatTest"], [7, 1, 1, "", "_get_month"], [7, 1, 1, "", "extract_indices_around"], [7, 1, 1, "", "extract_region"], [7, 1, 1, "", "haversine"], [7, 1, 1, "", "levene_test"], [7, 1, 1, "", "load_all_stations"], [7, 1, 1, "", "load_csv"], [7, 1, 1, "", "load_pickle"], [7, 1, 1, "", "map_to_xarray"], [7, 1, 1, "", "plot_background"], [7, 1, 1, "", "plot_ks_stats"], [7, 1, 1, "", "ranksums_test"], [7, 1, 1, "", "store_csv"], [7, 1, 1, "", "store_pickle"]], "pyESD.ESD_utils.Dataset": [[7, 3, 1, "", "get"]], "pyESD.MLR_model": [[7, 2, 1, "", "BootstrappedForwardSelection"], [7, 2, 1, "", "BootstrappedRegression"], [7, 2, 1, "", "ForwardSelection"], [7, 2, 1, "", "MultipleLSRegression"], [7, 1, 1, "", "_get_active"]], "pyESD.MLR_model.BootstrappedRegression": [[7, 3, 1, "", "fit"], [7, 3, 1, "", "fit_predict"], [7, 3, 1, "", "predict"]], "pyESD.MLR_model.ForwardSelection": [[7, 3, 1, "", "average_additional_results"], [7, 3, 1, "", "average_coefs"], [7, 3, 1, "", "fit"], [7, 3, 1, "", "fit_active"], [7, 3, 1, "", "predict"], [7, 3, 1, "", "predict_active"], [7, 3, 1, "", "set_additional_results"]], "pyESD.MLR_model.MultipleLSRegression": [[7, 3, 1, "", "fit"], [7, 3, 1, "", "predict"], [7, 3, 1, "", "set_expand_coefs"]], "pyESD.Predictor_Base": [[7, 2, 1, "", "Predictor"]], "pyESD.Predictor_Base.Predictor": [[7, 3, 1, "", "fit"], [7, 3, 1, "", "get"], [7, 3, 1, "", "load"], [7, 3, 1, "", "plot"], [7, 3, 1, "", "save"]], "pyESD.Predictor_Generator": [[7, 2, 1, "", "RegionalAverage"]], "pyESD.StationOperator": [[7, 2, 1, "", "StationOperator"], [7, 1, 1, "", "load_station"]], "pyESD.StationOperator.StationOperator": [[7, 3, 1, "", "climate_score"], [7, 3, 1, "", "cross_validate_and_predict"], [7, 3, 1, "", "ensemble_transform"], [7, 3, 1, "", "evaluate"], [7, 3, 1, "", "fit"], [7, 3, 1, "", "fit_predictor"], [7, 3, 1, "", "get_explained_variance"], [7, 3, 1, "", "get_var"], [7, 3, 1, "", "predict"], [7, 3, 1, "", "predictor_correlation"], [7, 3, 1, "", "relative_predictor_importance"], [7, 3, 1, "", "save"], [7, 3, 1, "", "selected_names"], [7, 3, 1, "", "set_model"], [7, 3, 1, "", "set_predictors"], [7, 3, 1, "", "set_standardizer"], [7, 3, 1, "", "set_transform"], [7, 3, 1, "", "tree_based_feature_importance"], [7, 3, 1, "", "tree_based_feature_permutation_importance"]], "pyESD.Weatherstation": [[7, 1, 1, "", "read_station_csv"], [7, 1, 1, "", "read_weatherstationnames"], [7, 1, 1, "", "read_weatherstations"]], "pyESD.dense_models": [[7, 2, 1, "", "DeepLearningRegressor"]], "pyESD.dense_models.DeepLearningRegressor": [[7, 3, 1, "", "build_model"], [7, 3, 1, "", "compile_model"], [7, 3, 1, "", "convert_to_sklearn_regressor"], [7, 3, 1, "", "fit"], [7, 3, 1, "", "plot_network"], [7, 3, 1, "", "predict"]], "pyESD.ensemble_models": [[7, 2, 1, "", "EnsembleRegressor"]], "pyESD.ensemble_models.EnsembleRegressor": [[7, 3, 1, "", "cross_val_predict"], [7, 3, 1, "", "cross_val_score"], [7, 3, 1, "", "cross_validate"], [7, 3, 1, "", "fit"], [7, 3, 1, "", "get_params"], [7, 3, 1, "", "predict"], [7, 3, 1, "", "predict_average"], [7, 3, 1, "", "score"], [7, 3, 1, "", "transform"]], "pyESD.feature_selection": [[7, 2, 1, "", "RecursiveFeatureElimination"], [7, 2, 1, "", "SequentialFeatureSelection"], [7, 2, 1, "", "TreeBasedSelection"]], "pyESD.feature_selection.RecursiveFeatureElimination": [[7, 3, 1, "", "cv_test_score"], [7, 3, 1, "", "fit"], [7, 3, 1, "", "print_selected_features"], [7, 3, 1, "", "score"], [7, 3, 1, "", "transform"]], "pyESD.feature_selection.SequentialFeatureSelection": [[7, 3, 1, "", "fit"], [7, 3, 1, "", "print_selected_features"], [7, 3, 1, "", "score"], [7, 3, 1, "", "transform"]], "pyESD.feature_selection.TreeBasedSelection": [[7, 3, 1, "", "feature_importance"], [7, 3, 1, "", "fit"], [7, 3, 1, "", "permutation_importance_"], [7, 3, 1, "", "print_selected_features"], [7, 3, 1, "", "transform"]], "pyESD.metrics": [[7, 2, 1, "", "Evaluate"]], "pyESD.metrics.Evaluate": [[7, 3, 1, "", "MAE"], [7, 3, 1, "", "MSE"], [7, 3, 1, "", "NSE"], [7, 3, 1, "", "R2_score"], [7, 3, 1, "", "RMSE"], [7, 3, 1, "", "adjusted_r2"], [7, 3, 1, "", "explained_variance"], [7, 3, 1, "", "max_error"]], "pyESD.models": [[7, 2, 1, "", "HyperparameterOptimize"], [7, 2, 1, "", "MetaAttributes"], [7, 2, 1, "", "Regressors"]], "pyESD.models.HyperparameterOptimize": [[7, 3, 1, "", "best_estimator"], [7, 3, 1, "", "cross_val_predict"], [7, 3, 1, "", "cross_val_score"], [7, 3, 1, "", "cross_validate"], [7, 3, 1, "", "fit"], [7, 3, 1, "", "predict_log_proba"], [7, 3, 1, "", "score"], [7, 3, 1, "", "transform"]], "pyESD.models.MetaAttributes": [[7, 3, 1, "", "alpha"], [7, 3, 1, "", "best_estimator"], [7, 3, 1, "", "best_params"], [7, 3, 1, "", "coef"], [7, 3, 1, "", "get_params"], [7, 3, 1, "", "intercept"], [7, 3, 1, "", "set_params"]], "pyESD.models.Regressors": [[7, 3, 1, "", "cross_val_predict"], [7, 3, 1, "", "cross_val_score"], [7, 3, 1, "", "cross_validate"], [7, 3, 1, "", "fit"], [7, 3, 1, "", "predict"], [7, 3, 1, "", "score"], [7, 3, 1, "", "set_model"]], "pyESD.plot": [[7, 1, 1, "", "barplot"], [7, 1, 1, "", "boxplot"], [7, 1, 1, "", "correlation_heatmap"], [7, 1, 1, "", "heatmaps"], [7, 1, 1, "", "lineplot"], [7, 1, 1, "", "plot_monthly_mean"], [7, 1, 1, "", "plot_projection_comparison"], [7, 1, 1, "", "plot_time_series"], [7, 1, 1, "", "scatterplot"]], "pyESD.plot_utils": [[7, 1, 1, "", "apply_style"], [7, 1, 1, "", "barplot_data"], [7, 1, 1, "", "boxplot_data"], [7, 1, 1, "", "correlation_data"], [7, 1, 1, "", "count_predictors"], [7, 1, 1, "", "extract_comparison_data_means"], [7, 1, 1, "", "extract_time_series"], [7, 1, 1, "", "monthly_mean"], [7, 1, 1, "", "prediction_example_data"], [7, 1, 1, "", "resample_monthly"], [7, 1, 1, "", "resample_seasonally"], [7, 1, 1, "", "seasonal_mean"]], "pyESD.predictand": [[7, 2, 1, "", "PredictandTimeseries"]], "pyESD.predictand.PredictandTimeseries": [[7, 3, 1, "", "climate_score"], [7, 3, 1, "", "cross_validate_and_predict"], [7, 3, 1, "", "ensemble_transform"], [7, 3, 1, "", "evaluate"], [7, 3, 1, "", "fit"], [7, 3, 1, "", "fit_predictor"], [7, 3, 1, "", "get"], [7, 3, 1, "", "predict"], [7, 3, 1, "", "predictor_correlation"], [7, 3, 1, "", "relative_predictor_importance"], [7, 3, 1, "", "selected_names"], [7, 3, 1, "", "set_model"], [7, 3, 1, "", "set_predictors"], [7, 3, 1, "", "set_standardizer"], [7, 3, 1, "", "set_transform"], [7, 3, 1, "", "tree_based_feature_importance"], [7, 3, 1, "", "tree_based_feature_permutation_importance"]], "pyESD.splitter": [[7, 2, 1, "", "MonthlyBooststrapper"], [7, 2, 1, "", "Splitter"], [7, 2, 1, "", "YearlyBootstrapper"]], "pyESD.splitter.MonthlyBooststrapper": [[7, 3, 1, "", "split"]], "pyESD.splitter.Splitter": [[7, 3, 1, "", "get_n_splits"], [7, 3, 1, "", "split"]], "pyESD.splitter.YearlyBootstrapper": [[7, 3, 1, "", "split"]], "pyESD.standardizer": [[7, 2, 1, "", "MonthlyStandardizer"], [7, 2, 1, "", "NoStandardizer"], [7, 2, 1, "", "PCAScaling"], [7, 2, 1, "", "StandardScaling"], [7, 1, 1, "", "add_seasonal_cycle"], [7, 1, 1, "", "get_annual_mean_cycle"], [7, 1, 1, "", "get_mean_prediction"], [7, 1, 1, "", "remove_seasonal_cycle"]], "pyESD.standardizer.MonthlyStandardizer": [[7, 3, 1, "", "fit"], [7, 3, 1, "", "inverse_transform"], [7, 3, 1, "", "transform"]], "pyESD.standardizer.NoStandardizer": [[7, 3, 1, "", "fit"], [7, 3, 1, "", "inverse_transform"], [7, 3, 1, "", "transform"]], "pyESD.standardizer.PCAScaling": [[7, 3, 1, "", "fit"], [7, 3, 1, "", "fit_transform"], [7, 3, 1, "", "inverse_transform"], [7, 3, 1, "", "transform"]], "pyESD.standardizer.StandardScaling": [[7, 3, 1, "", "fit"], [7, 3, 1, "", "inverse_transform"], [7, 3, 1, "", "transform"]], "pyESD.teleconnections": [[7, 2, 1, "", "EA"], [7, 2, 1, "", "EAWR"], [7, 2, 1, "", "MEI"], [7, 2, 1, "", "NAO"], [7, 2, 1, "", "SCAN"], [7, 1, 1, "", "_get_month"], [7, 1, 1, "", "eof_analysis"], [7, 1, 1, "", "extract_region"]], "pyESD.teleconnections.EA": [[7, 3, 1, "", "plot_cov_matrix"]], "pyESD.teleconnections.EAWR": [[7, 3, 1, "", "plot_cov_matrix"]], "pyESD.teleconnections.NAO": [[7, 3, 1, "", "plot_cov_matrix"]], "pyESD.teleconnections.SCAN": [[7, 3, 1, "", "plot_cov_matrix"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"]}, "titleterms": {"practic": 0, "exampl": 0, "1": 0, "downscal": [0, 2, 6, 9], "precipit": 0, "temperatur": 0, "weather": 0, "station": 0, "locat": 0, "neckar": 0, "catchment": 0, "southwestern": 0, "germani": 0, "2": 0, "synopt": 0, "ghana": 0, "us": [0, 2, 6, 9], "stack": 0, "gener": 0, "galleri": 1, "akwaaba": 2, "welcom": 2, "pyesd": [2, 6, 7, 9], "document": 2, "why": [2, 6], "i": [2, 6], "import": [2, 6], "what": [2, 6, 9], "perfect": [2, 6], "prognosi": [2, 6], "can": [2, 6], "do": [2, 6, 9], "t": [2, 6], "who": [2, 6], "develop": [2, 6], "get": [2, 6], "touch": [2, 6], "u": [2, 6], "some": [2, 6], "paper": [2, 6], "preprint": [2, 6], "have": [2, 6], "licens": 2, "indic": [2, 9], "tabl": 2, "instal": 3, "from": 3, "pypi": 3, "github": 3, "common": 3, "issu": 3, "depend": 3, "method": 4, "model": [4, 7, 9], "framework": [4, 8], "api": 5, "refer": 5, "overview": 6, "packag": 7, "submodul": 7, "esd_util": 7, "modul": 7, "predictor_bas": 7, "predictor_gener": 7, "stationoper": 7, "weatherstationpreprocess": 7, "dense_model": 7, "ensemble_model": 7, "feature_select": 7, "metric": 7, "plot": 7, "plot_util": 7, "predictand": 7, "splitter": 7, "standard": 7, "teleconnect": [7, 9], "data_preprocessing_util": 7, "mlr": 7, "content": 7, "test": 8, "unittest": 8, "climat": 9, "inform": 9, "preprocess": 9, "data": 9, "dataset": 9, "look": 9, "like": 9, "select": 9, "predictor": 9, "esd": 9, "includ": 9, "larg": 9, "scale": 9, "how": 9, "optim": 9, "coupl": 9, "gcm": 9, "futur": 9, "predict": 9, "visual": 9, "analysi": 9}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "nbsphinx": 4, "sphinx": 57}, "alltitles": {"Practical examples": [[0, "practical-examples"]], "1. Downscaling of precipitation and temperature for weather station located in the Neckar catchment, Southwestern Germany": [[0, "downscaling-of-precipitation-and-temperature-for-weather-station-located-in-the-neckar-catchment-southwestern-germany"]], "2. Downscaling of precipitation for synoptic weather stations in Ghana using Stacked Generalization": [[0, "downscaling-of-precipitation-for-synoptic-weather-stations-in-ghana-using-stacked-generalization"]], "Gallery": [[1, "gallery"]], "Akwaaba! Welcome to PyESD Documentation!": [[2, "akwaaba-welcome-to-pyesd-documentation"]], "Why is downscaling important?": [[2, "why-is-downscaling-important"], [6, "why-is-downscaling-important"]], "What is the Perfect Prognosis?": [[2, "what-is-the-perfect-prognosis"], [6, "what-is-the-perfect-prognosis"]], "What can PyESD do?": [[2, "what-can-pyesd-do"], [6, "what-can-pyesd-do"]], "What pyESD can\u2019t do?": [[2, "what-pyesd-can-t-do"], [6, "what-pyesd-can-t-do"]], "Who developed pyESD?": [[2, "who-developed-pyesd"], [6, "who-developed-pyesd"]], "Getting in touch with us": [[2, "getting-in-touch-with-us"], [6, "getting-in-touch-with-us"]], "Some papers and preprints that have used pyESD": [[2, "some-papers-and-preprints-that-have-used-pyesd"], [6, "some-papers-and-preprints-that-have-used-pyesd"]], "Documentation": [[2, "documentation"]], "License": [[2, "license"]], "Indices and tables": [[2, "indices-and-tables"]], "Installation": [[3, "installation"]], "Install from PyPI": [[3, "install-from-pypi"]], "Install from Github": [[3, "install-from-github"]], "Common issues": [[3, "common-issues"]], "Dependencies": [[3, "dependencies"]], "Methods": [[4, "methods"]], "Modelling framework": [[4, "modelling-framework"]], "API Reference": [[5, "api-reference"]], "Overview": [[6, "id1"]], "pyESD package": [[7, "pyesd-package"]], "Submodules": [[7, "submodules"]], "pyESD.ESD_utils module": [[7, "module-pyESD.ESD_utils"]], "pyESD.Predictor_Base module": [[7, "module-pyESD.Predictor_Base"]], "pyESD.Predictor_Generator module": [[7, "module-pyESD.Predictor_Generator"]], "pyESD.StationOperator module": [[7, "module-pyESD.StationOperator"]], "pyESD.WeatherstationPreprocessing module": [[7, "module-pyESD.Weatherstation"]], "pyESD.dense_models module": [[7, "module-pyESD.dense_models"]], "pyESD.ensemble_models module": [[7, "module-pyESD.ensemble_models"]], "pyESD.feature_selection module": [[7, "module-pyESD.feature_selection"]], "pyESD.metrics module": [[7, "module-pyESD.metrics"]], "pyESD.models module": [[7, "module-pyESD.models"]], "pyESD.plot module": [[7, "module-pyESD.plot"]], "pyESD.plot_utils module": [[7, "module-pyESD.plot_utils"]], "pyESD.predictand module": [[7, "module-pyESD.predictand"]], "pyESD.splitter module": [[7, "module-pyESD.splitter"]], "pyESD.standardizer module": [[7, "module-pyESD.standardizer"]], "pyESD.teleconnections module": [[7, "module-pyESD.teleconnections"]], "pyESD.data_preprocessing_utils module": [[7, "pyesd-data-preprocessing-utils-module"]], "pyESD.MLR module": [[7, "module-pyESD.MLR_model"]], "Module contents": [[7, "module-pyESD"]], "Testing": [[8, "testing"]], "UNITTEST FRAMEWORK": [[8, "unittest-framework"]], "Using pyESD for Downscaling Climate Information": [[9, "using-pyesd-for-downscaling-climate-information"]], "Preprocessing Data for pyESD": [[9, "preprocessing-data-for-pyesd"]], "What Do the Datasets Look Like?": [[9, "what-do-the-datasets-look-like"]], "Selecting Predictors for ESD": [[9, "selecting-predictors-for-esd"]], "Including Large-Scale Teleconnection Indices": [[9, "including-large-scale-teleconnection-indices"]], "How to select the optimal model for ESD": [[9, "how-to-select-the-optimal-model-for-esd"]], "Coupling ESD to GCMs for future prediction": [[9, "coupling-esd-to-gcms-for-future-prediction"]], "Visualization and Data Analysis": [[9, "visualization-and-data-analysis"]]}, "indexentries": {"bootstrappedforwardselection (class in pyesd.mlr_model)": [[7, "pyESD.MLR_model.BootstrappedForwardSelection"]], "bootstrappedregression (class in pyesd.mlr_model)": [[7, "pyESD.MLR_model.BootstrappedRegression"]], "computestat() (in module pyesd.esd_utils)": [[7, "pyESD.ESD_utils.ComputeStat"]], "dataset (class in pyesd.esd_utils)": [[7, "pyESD.ESD_utils.Dataset"]], "deeplearningregressor (class in pyesd.dense_models)": [[7, "pyESD.dense_models.DeepLearningRegressor"]], "ea (class in pyesd.teleconnections)": [[7, "pyESD.teleconnections.EA"]], "eawr (class in pyesd.teleconnections)": [[7, "pyESD.teleconnections.EAWR"]], "ensembleregressor (class in pyesd.ensemble_models)": [[7, "pyESD.ensemble_models.EnsembleRegressor"]], "evaluate (class in pyesd.metrics)": [[7, "pyESD.metrics.Evaluate"]], "forwardselection (class in pyesd.mlr_model)": [[7, "pyESD.MLR_model.ForwardSelection"]], "hyperparameteroptimize (class in pyesd.models)": [[7, "pyESD.models.HyperparameterOptimize"]], "mae() (pyesd.metrics.evaluate method)": [[7, "pyESD.metrics.Evaluate.MAE"]], "mei (class in pyesd.teleconnections)": [[7, "pyESD.teleconnections.MEI"]], "mse() (pyesd.metrics.evaluate method)": [[7, "pyESD.metrics.Evaluate.MSE"]], "metaattributes (class in pyesd.models)": [[7, "pyESD.models.MetaAttributes"]], "midpointnormalize (class in pyesd.esd_utils)": [[7, "pyESD.ESD_utils.MidpointNormalize"]], "monthlybooststrapper (class in pyesd.splitter)": [[7, "pyESD.splitter.MonthlyBooststrapper"]], "monthlystandardizer (class in pyesd.standardizer)": [[7, "pyESD.standardizer.MonthlyStandardizer"]], "multiplelsregression (class in pyesd.mlr_model)": [[7, "pyESD.MLR_model.MultipleLSRegression"]], "nao (class in pyesd.teleconnections)": [[7, "pyESD.teleconnections.NAO"]], "nse() (pyesd.metrics.evaluate method)": [[7, "pyESD.metrics.Evaluate.NSE"]], "nostandardizer (class in pyesd.standardizer)": [[7, "pyESD.standardizer.NoStandardizer"]], "pcascaling (class in pyesd.standardizer)": [[7, "pyESD.standardizer.PCAScaling"]], "predictandtimeseries (class in pyesd.predictand)": [[7, "pyESD.predictand.PredictandTimeseries"]], "predictor (class in pyesd.predictor_base)": [[7, "pyESD.Predictor_Base.Predictor"]], "r2_score() (pyesd.metrics.evaluate method)": [[7, "pyESD.metrics.Evaluate.R2_score"]], "rmse() (pyesd.metrics.evaluate method)": [[7, "pyESD.metrics.Evaluate.RMSE"]], "recursivefeatureelimination (class in pyesd.feature_selection)": [[7, "pyESD.feature_selection.RecursiveFeatureElimination"]], "regionalaverage (class in pyesd.predictor_generator)": [[7, "pyESD.Predictor_Generator.RegionalAverage"]], "regressors (class in pyesd.models)": [[7, "pyESD.models.Regressors"]], "scan (class in pyesd.teleconnections)": [[7, "pyESD.teleconnections.SCAN"]], "sequentialfeatureselection (class in pyesd.feature_selection)": [[7, "pyESD.feature_selection.SequentialFeatureSelection"]], "splitter (class in pyesd.splitter)": [[7, "pyESD.splitter.Splitter"]], "stackarray() (in module pyesd.esd_utils)": [[7, "pyESD.ESD_utils.StackArray"]], "standardscaling (class in pyesd.standardizer)": [[7, "pyESD.standardizer.StandardScaling"]], "stattest() (in module pyesd.esd_utils)": [[7, "pyESD.ESD_utils.StatTest"]], "stationoperator (class in pyesd.stationoperator)": [[7, "pyESD.StationOperator.StationOperator"]], "treebasedselection (class in pyesd.feature_selection)": [[7, "pyESD.feature_selection.TreeBasedSelection"]], "yearlybootstrapper (class in pyesd.splitter)": [[7, "pyESD.splitter.YearlyBootstrapper"]], "_get_active() (in module pyesd.mlr_model)": [[7, "pyESD.MLR_model._get_active"]], "_get_month() (in module pyesd.esd_utils)": [[7, "pyESD.ESD_utils._get_month"]], "_get_month() (in module pyesd.teleconnections)": [[7, "pyESD.teleconnections._get_month"]], "add_seasonal_cycle() (in module pyesd.standardizer)": [[7, "pyESD.standardizer.add_seasonal_cycle"]], "adjusted_r2() (pyesd.metrics.evaluate method)": [[7, "pyESD.metrics.Evaluate.adjusted_r2"]], "alpha() (pyesd.models.metaattributes method)": [[7, "pyESD.models.MetaAttributes.alpha"]], "apply_style() (in module pyesd.plot_utils)": [[7, "pyESD.plot_utils.apply_style"]], "average_additional_results() (pyesd.mlr_model.forwardselection method)": [[7, "pyESD.MLR_model.ForwardSelection.average_additional_results"]], "average_coefs() (pyesd.mlr_model.forwardselection method)": [[7, "pyESD.MLR_model.ForwardSelection.average_coefs"]], "barplot() (in module pyesd.plot)": [[7, "pyESD.plot.barplot"]], "barplot_data() (in module pyesd.plot_utils)": [[7, "pyESD.plot_utils.barplot_data"]], "best_estimator() (pyesd.models.hyperparameteroptimize method)": [[7, "pyESD.models.HyperparameterOptimize.best_estimator"]], "best_estimator() (pyesd.models.metaattributes method)": [[7, "pyESD.models.MetaAttributes.best_estimator"]], "best_params() (pyesd.models.metaattributes method)": [[7, "pyESD.models.MetaAttributes.best_params"]], "boxplot() (in module pyesd.plot)": [[7, "pyESD.plot.boxplot"]], "boxplot_data() (in module pyesd.plot_utils)": [[7, "pyESD.plot_utils.boxplot_data"]], "build_model() (pyesd.dense_models.deeplearningregressor method)": [[7, "pyESD.dense_models.DeepLearningRegressor.build_model"]], "climate_score() (pyesd.stationoperator.stationoperator method)": [[7, "pyESD.StationOperator.StationOperator.climate_score"]], "climate_score() (pyesd.predictand.predictandtimeseries method)": [[7, "pyESD.predictand.PredictandTimeseries.climate_score"]], "coef() (pyesd.models.metaattributes method)": [[7, "pyESD.models.MetaAttributes.coef"]], "compile_model() (pyesd.dense_models.deeplearningregressor method)": [[7, "pyESD.dense_models.DeepLearningRegressor.compile_model"]], "convert_to_sklearn_regressor() (pyesd.dense_models.deeplearningregressor method)": [[7, "pyESD.dense_models.DeepLearningRegressor.convert_to_sklearn_regressor"]], "correlation_data() (in module pyesd.plot_utils)": [[7, "pyESD.plot_utils.correlation_data"]], "correlation_heatmap() (in module pyesd.plot)": [[7, "pyESD.plot.correlation_heatmap"]], "count_predictors() (in module pyesd.plot_utils)": [[7, "pyESD.plot_utils.count_predictors"]], "cross_val_predict() (pyesd.ensemble_models.ensembleregressor method)": [[7, "pyESD.ensemble_models.EnsembleRegressor.cross_val_predict"]], "cross_val_predict() (pyesd.models.hyperparameteroptimize method)": [[7, "pyESD.models.HyperparameterOptimize.cross_val_predict"]], "cross_val_predict() (pyesd.models.regressors method)": [[7, "pyESD.models.Regressors.cross_val_predict"]], "cross_val_score() (pyesd.ensemble_models.ensembleregressor method)": [[7, "pyESD.ensemble_models.EnsembleRegressor.cross_val_score"]], "cross_val_score() (pyesd.models.hyperparameteroptimize method)": [[7, "pyESD.models.HyperparameterOptimize.cross_val_score"]], "cross_val_score() (pyesd.models.regressors method)": [[7, "pyESD.models.Regressors.cross_val_score"]], "cross_validate() (pyesd.ensemble_models.ensembleregressor method)": [[7, "pyESD.ensemble_models.EnsembleRegressor.cross_validate"]], "cross_validate() (pyesd.models.hyperparameteroptimize method)": [[7, "pyESD.models.HyperparameterOptimize.cross_validate"]], "cross_validate() (pyesd.models.regressors method)": [[7, "pyESD.models.Regressors.cross_validate"]], "cross_validate_and_predict() (pyesd.stationoperator.stationoperator method)": [[7, "pyESD.StationOperator.StationOperator.cross_validate_and_predict"]], "cross_validate_and_predict() (pyesd.predictand.predictandtimeseries method)": [[7, "pyESD.predictand.PredictandTimeseries.cross_validate_and_predict"]], "cv_test_score() (pyesd.feature_selection.recursivefeatureelimination method)": [[7, "pyESD.feature_selection.RecursiveFeatureElimination.cv_test_score"]], "ensemble_transform() (pyesd.stationoperator.stationoperator method)": [[7, "pyESD.StationOperator.StationOperator.ensemble_transform"]], "ensemble_transform() (pyesd.predictand.predictandtimeseries method)": [[7, "pyESD.predictand.PredictandTimeseries.ensemble_transform"]], "eof_analysis() (in module pyesd.teleconnections)": [[7, "pyESD.teleconnections.eof_analysis"]], "evaluate() (pyesd.stationoperator.stationoperator method)": [[7, "pyESD.StationOperator.StationOperator.evaluate"]], "evaluate() (pyesd.predictand.predictandtimeseries method)": [[7, "pyESD.predictand.PredictandTimeseries.evaluate"]], "explained_variance() (pyesd.metrics.evaluate method)": [[7, "pyESD.metrics.Evaluate.explained_variance"]], "extract_comparison_data_means() (in module pyesd.plot_utils)": [[7, "pyESD.plot_utils.extract_comparison_data_means"]], "extract_indices_around() (in module pyesd.esd_utils)": [[7, "pyESD.ESD_utils.extract_indices_around"]], "extract_region() (in module pyesd.esd_utils)": [[7, "pyESD.ESD_utils.extract_region"]], "extract_region() (in module pyesd.teleconnections)": [[7, "pyESD.teleconnections.extract_region"]], "extract_time_series() (in module pyesd.plot_utils)": [[7, "pyESD.plot_utils.extract_time_series"]], "feature_importance() (pyesd.feature_selection.treebasedselection method)": [[7, "pyESD.feature_selection.TreeBasedSelection.feature_importance"]], "fit() (pyesd.mlr_model.bootstrappedregression method)": [[7, "pyESD.MLR_model.BootstrappedRegression.fit"]], "fit() (pyesd.mlr_model.forwardselection method)": [[7, "pyESD.MLR_model.ForwardSelection.fit"]], "fit() (pyesd.mlr_model.multiplelsregression method)": [[7, "pyESD.MLR_model.MultipleLSRegression.fit"]], "fit() (pyesd.predictor_base.predictor method)": [[7, "pyESD.Predictor_Base.Predictor.fit"]], "fit() (pyesd.stationoperator.stationoperator method)": [[7, "pyESD.StationOperator.StationOperator.fit"]], "fit() (pyesd.dense_models.deeplearningregressor method)": [[7, "pyESD.dense_models.DeepLearningRegressor.fit"]], "fit() (pyesd.ensemble_models.ensembleregressor method)": [[7, "pyESD.ensemble_models.EnsembleRegressor.fit"]], "fit() (pyesd.feature_selection.recursivefeatureelimination method)": [[7, "pyESD.feature_selection.RecursiveFeatureElimination.fit"]], "fit() (pyesd.feature_selection.sequentialfeatureselection method)": [[7, "pyESD.feature_selection.SequentialFeatureSelection.fit"]], "fit() (pyesd.feature_selection.treebasedselection method)": [[7, "pyESD.feature_selection.TreeBasedSelection.fit"]], "fit() (pyesd.models.hyperparameteroptimize method)": [[7, "pyESD.models.HyperparameterOptimize.fit"]], "fit() (pyesd.models.regressors method)": [[7, "pyESD.models.Regressors.fit"]], "fit() (pyesd.predictand.predictandtimeseries method)": [[7, "pyESD.predictand.PredictandTimeseries.fit"]], "fit() (pyesd.standardizer.monthlystandardizer method)": [[7, "pyESD.standardizer.MonthlyStandardizer.fit"]], "fit() (pyesd.standardizer.nostandardizer method)": [[7, "pyESD.standardizer.NoStandardizer.fit"]], "fit() (pyesd.standardizer.pcascaling method)": [[7, "pyESD.standardizer.PCAScaling.fit"]], "fit() (pyesd.standardizer.standardscaling method)": [[7, "pyESD.standardizer.StandardScaling.fit"]], "fit_active() (pyesd.mlr_model.forwardselection method)": [[7, "pyESD.MLR_model.ForwardSelection.fit_active"]], "fit_predict() (pyesd.mlr_model.bootstrappedregression method)": [[7, "pyESD.MLR_model.BootstrappedRegression.fit_predict"]], "fit_predictor() (pyesd.stationoperator.stationoperator method)": [[7, "pyESD.StationOperator.StationOperator.fit_predictor"]], "fit_predictor() (pyesd.predictand.predictandtimeseries method)": [[7, "pyESD.predictand.PredictandTimeseries.fit_predictor"]], "fit_transform() (pyesd.standardizer.pcascaling method)": [[7, "pyESD.standardizer.PCAScaling.fit_transform"]], "get() (pyesd.esd_utils.dataset method)": [[7, "pyESD.ESD_utils.Dataset.get"]], "get() (pyesd.predictor_base.predictor method)": [[7, "pyESD.Predictor_Base.Predictor.get"]], "get() (pyesd.predictand.predictandtimeseries method)": [[7, "pyESD.predictand.PredictandTimeseries.get"]], "get_annual_mean_cycle() (in module pyesd.standardizer)": [[7, "pyESD.standardizer.get_annual_mean_cycle"]], "get_explained_variance() (pyesd.stationoperator.stationoperator method)": [[7, "pyESD.StationOperator.StationOperator.get_explained_variance"]], "get_mean_prediction() (in module pyesd.standardizer)": [[7, "pyESD.standardizer.get_mean_prediction"]], "get_n_splits() (pyesd.splitter.splitter method)": [[7, "pyESD.splitter.Splitter.get_n_splits"]], "get_params() (pyesd.ensemble_models.ensembleregressor method)": [[7, "pyESD.ensemble_models.EnsembleRegressor.get_params"]], "get_params() (pyesd.models.metaattributes method)": [[7, "pyESD.models.MetaAttributes.get_params"]], "get_var() (pyesd.stationoperator.stationoperator method)": [[7, "pyESD.StationOperator.StationOperator.get_var"]], "haversine() (in module pyesd.esd_utils)": [[7, "pyESD.ESD_utils.haversine"]], "heatmaps() (in module pyesd.plot)": [[7, "pyESD.plot.heatmaps"]], "intercept() (pyesd.models.metaattributes method)": [[7, "pyESD.models.MetaAttributes.intercept"]], "inverse_transform() (pyesd.standardizer.monthlystandardizer method)": [[7, "pyESD.standardizer.MonthlyStandardizer.inverse_transform"]], "inverse_transform() (pyesd.standardizer.nostandardizer method)": [[7, "pyESD.standardizer.NoStandardizer.inverse_transform"]], "inverse_transform() (pyesd.standardizer.pcascaling method)": [[7, "pyESD.standardizer.PCAScaling.inverse_transform"]], "inverse_transform() (pyesd.standardizer.standardscaling method)": [[7, "pyESD.standardizer.StandardScaling.inverse_transform"]], "levene_test() (in module pyesd.esd_utils)": [[7, "pyESD.ESD_utils.levene_test"]], "lineplot() (in module pyesd.plot)": [[7, "pyESD.plot.lineplot"]], "load() (pyesd.predictor_base.predictor method)": [[7, "pyESD.Predictor_Base.Predictor.load"]], "load_all_stations() (in module pyesd.esd_utils)": [[7, "pyESD.ESD_utils.load_all_stations"]], "load_csv() (in module pyesd.esd_utils)": [[7, "pyESD.ESD_utils.load_csv"]], "load_pickle() (in module pyesd.esd_utils)": [[7, "pyESD.ESD_utils.load_pickle"]], "load_station() (in module pyesd.stationoperator)": [[7, "pyESD.StationOperator.load_station"]], "map_to_xarray() (in module pyesd.esd_utils)": [[7, "pyESD.ESD_utils.map_to_xarray"]], "max_error() (pyesd.metrics.evaluate method)": [[7, "pyESD.metrics.Evaluate.max_error"]], "module": [[7, "module-pyESD"], [7, "module-pyESD.ESD_utils"], [7, "module-pyESD.MLR_model"], [7, "module-pyESD.Predictor_Base"], [7, "module-pyESD.Predictor_Generator"], [7, "module-pyESD.StationOperator"], [7, "module-pyESD.Weatherstation"], [7, "module-pyESD.dense_models"], [7, "module-pyESD.ensemble_models"], [7, "module-pyESD.feature_selection"], [7, "module-pyESD.metrics"], [7, "module-pyESD.models"], [7, "module-pyESD.plot"], [7, "module-pyESD.plot_utils"], [7, "module-pyESD.predictand"], [7, "module-pyESD.splitter"], [7, "module-pyESD.standardizer"], [7, "module-pyESD.teleconnections"]], "monthly_mean() (in module pyesd.plot_utils)": [[7, "pyESD.plot_utils.monthly_mean"]], "permutation_importance_() (pyesd.feature_selection.treebasedselection method)": [[7, "pyESD.feature_selection.TreeBasedSelection.permutation_importance_"]], "plot() (pyesd.predictor_base.predictor method)": [[7, "pyESD.Predictor_Base.Predictor.plot"]], "plot_background() (in module pyesd.esd_utils)": [[7, "pyESD.ESD_utils.plot_background"]], "plot_cov_matrix() (pyesd.teleconnections.ea method)": [[7, "pyESD.teleconnections.EA.plot_cov_matrix"]], "plot_cov_matrix() (pyesd.teleconnections.eawr method)": [[7, "pyESD.teleconnections.EAWR.plot_cov_matrix"]], "plot_cov_matrix() (pyesd.teleconnections.nao method)": [[7, "pyESD.teleconnections.NAO.plot_cov_matrix"]], "plot_cov_matrix() (pyesd.teleconnections.scan method)": [[7, "pyESD.teleconnections.SCAN.plot_cov_matrix"]], "plot_ks_stats() (in module pyesd.esd_utils)": [[7, "pyESD.ESD_utils.plot_ks_stats"]], "plot_monthly_mean() (in module pyesd.plot)": [[7, "pyESD.plot.plot_monthly_mean"]], "plot_network() (pyesd.dense_models.deeplearningregressor method)": [[7, "pyESD.dense_models.DeepLearningRegressor.plot_network"]], "plot_projection_comparison() (in module pyesd.plot)": [[7, "pyESD.plot.plot_projection_comparison"]], "plot_time_series() (in module pyesd.plot)": [[7, "pyESD.plot.plot_time_series"]], "predict() (pyesd.mlr_model.bootstrappedregression method)": [[7, "pyESD.MLR_model.BootstrappedRegression.predict"]], "predict() (pyesd.mlr_model.forwardselection method)": [[7, "pyESD.MLR_model.ForwardSelection.predict"]], "predict() (pyesd.mlr_model.multiplelsregression method)": [[7, "pyESD.MLR_model.MultipleLSRegression.predict"]], "predict() (pyesd.stationoperator.stationoperator method)": [[7, "pyESD.StationOperator.StationOperator.predict"]], "predict() (pyesd.dense_models.deeplearningregressor method)": [[7, "pyESD.dense_models.DeepLearningRegressor.predict"]], "predict() (pyesd.ensemble_models.ensembleregressor method)": [[7, "pyESD.ensemble_models.EnsembleRegressor.predict"]], "predict() (pyesd.models.regressors method)": [[7, "pyESD.models.Regressors.predict"]], "predict() (pyesd.predictand.predictandtimeseries method)": [[7, "pyESD.predictand.PredictandTimeseries.predict"]], "predict_active() (pyesd.mlr_model.forwardselection method)": [[7, "pyESD.MLR_model.ForwardSelection.predict_active"]], "predict_average() (pyesd.ensemble_models.ensembleregressor method)": [[7, "pyESD.ensemble_models.EnsembleRegressor.predict_average"]], "predict_log_proba() (pyesd.models.hyperparameteroptimize method)": [[7, "pyESD.models.HyperparameterOptimize.predict_log_proba"]], "prediction_example_data() (in module pyesd.plot_utils)": [[7, "pyESD.plot_utils.prediction_example_data"]], "predictor_correlation() (pyesd.stationoperator.stationoperator method)": [[7, "pyESD.StationOperator.StationOperator.predictor_correlation"]], "predictor_correlation() (pyesd.predictand.predictandtimeseries method)": [[7, "pyESD.predictand.PredictandTimeseries.predictor_correlation"]], "print_selected_features() (pyesd.feature_selection.recursivefeatureelimination method)": [[7, "pyESD.feature_selection.RecursiveFeatureElimination.print_selected_features"]], "print_selected_features() (pyesd.feature_selection.sequentialfeatureselection method)": [[7, "pyESD.feature_selection.SequentialFeatureSelection.print_selected_features"]], "print_selected_features() (pyesd.feature_selection.treebasedselection method)": [[7, "pyESD.feature_selection.TreeBasedSelection.print_selected_features"]], "pyesd": [[7, "module-pyESD"]], "pyesd.esd_utils": [[7, "module-pyESD.ESD_utils"]], "pyesd.mlr_model": [[7, "module-pyESD.MLR_model"]], "pyesd.predictor_base": [[7, "module-pyESD.Predictor_Base"]], "pyesd.predictor_generator": [[7, "module-pyESD.Predictor_Generator"]], "pyesd.stationoperator": [[7, "module-pyESD.StationOperator"]], "pyesd.weatherstation": [[7, "module-pyESD.Weatherstation"]], "pyesd.dense_models": [[7, "module-pyESD.dense_models"]], "pyesd.ensemble_models": [[7, "module-pyESD.ensemble_models"]], "pyesd.feature_selection": [[7, "module-pyESD.feature_selection"]], "pyesd.metrics": [[7, "module-pyESD.metrics"]], "pyesd.models": [[7, "module-pyESD.models"]], "pyesd.plot": [[7, "module-pyESD.plot"]], "pyesd.plot_utils": [[7, "module-pyESD.plot_utils"]], "pyesd.predictand": [[7, "module-pyESD.predictand"]], "pyesd.splitter": [[7, "module-pyESD.splitter"]], "pyesd.standardizer": [[7, "module-pyESD.standardizer"]], "pyesd.teleconnections": [[7, "module-pyESD.teleconnections"]], "ranksums_test() (in module pyesd.esd_utils)": [[7, "pyESD.ESD_utils.ranksums_test"]], "read_station_csv() (in module pyesd.weatherstation)": [[7, "pyESD.Weatherstation.read_station_csv"]], "read_weatherstationnames() (in module pyesd.weatherstation)": [[7, "pyESD.Weatherstation.read_weatherstationnames"]], "read_weatherstations() (in module pyesd.weatherstation)": [[7, "pyESD.Weatherstation.read_weatherstations"]], "relative_predictor_importance() (pyesd.stationoperator.stationoperator method)": [[7, "pyESD.StationOperator.StationOperator.relative_predictor_importance"]], "relative_predictor_importance() (pyesd.predictand.predictandtimeseries method)": [[7, "pyESD.predictand.PredictandTimeseries.relative_predictor_importance"]], "remove_seasonal_cycle() (in module pyesd.standardizer)": [[7, "pyESD.standardizer.remove_seasonal_cycle"]], "resample_monthly() (in module pyesd.plot_utils)": [[7, "pyESD.plot_utils.resample_monthly"]], "resample_seasonally() (in module pyesd.plot_utils)": [[7, "pyESD.plot_utils.resample_seasonally"]], "save() (pyesd.predictor_base.predictor method)": [[7, "pyESD.Predictor_Base.Predictor.save"]], "save() (pyesd.stationoperator.stationoperator method)": [[7, "pyESD.StationOperator.StationOperator.save"]], "scatterplot() (in module pyesd.plot)": [[7, "pyESD.plot.scatterplot"]], "score() (pyesd.ensemble_models.ensembleregressor method)": [[7, "pyESD.ensemble_models.EnsembleRegressor.score"]], "score() (pyesd.feature_selection.recursivefeatureelimination method)": [[7, "pyESD.feature_selection.RecursiveFeatureElimination.score"]], "score() (pyesd.feature_selection.sequentialfeatureselection method)": [[7, "pyESD.feature_selection.SequentialFeatureSelection.score"]], "score() (pyesd.models.hyperparameteroptimize method)": [[7, "pyESD.models.HyperparameterOptimize.score"]], "score() (pyesd.models.regressors method)": [[7, "pyESD.models.Regressors.score"]], "seasonal_mean() (in module pyesd.plot_utils)": [[7, "pyESD.plot_utils.seasonal_mean"]], "selected_names() (pyesd.stationoperator.stationoperator method)": [[7, "pyESD.StationOperator.StationOperator.selected_names"]], "selected_names() (pyesd.predictand.predictandtimeseries method)": [[7, "pyESD.predictand.PredictandTimeseries.selected_names"]], "set_additional_results() (pyesd.mlr_model.forwardselection method)": [[7, "pyESD.MLR_model.ForwardSelection.set_additional_results"]], "set_expand_coefs() (pyesd.mlr_model.multiplelsregression method)": [[7, "pyESD.MLR_model.MultipleLSRegression.set_expand_coefs"]], "set_model() (pyesd.stationoperator.stationoperator method)": [[7, "pyESD.StationOperator.StationOperator.set_model"]], "set_model() (pyesd.models.regressors method)": [[7, "pyESD.models.Regressors.set_model"]], "set_model() (pyesd.predictand.predictandtimeseries method)": [[7, "pyESD.predictand.PredictandTimeseries.set_model"]], "set_params() (pyesd.models.metaattributes method)": [[7, "pyESD.models.MetaAttributes.set_params"]], "set_predictors() (pyesd.stationoperator.stationoperator method)": [[7, "pyESD.StationOperator.StationOperator.set_predictors"]], "set_predictors() (pyesd.predictand.predictandtimeseries method)": [[7, "pyESD.predictand.PredictandTimeseries.set_predictors"]], "set_standardizer() (pyesd.stationoperator.stationoperator method)": [[7, "pyESD.StationOperator.StationOperator.set_standardizer"]], "set_standardizer() (pyesd.predictand.predictandtimeseries method)": [[7, "pyESD.predictand.PredictandTimeseries.set_standardizer"]], "set_transform() (pyesd.stationoperator.stationoperator method)": [[7, "pyESD.StationOperator.StationOperator.set_transform"]], "set_transform() (pyesd.predictand.predictandtimeseries method)": [[7, "pyESD.predictand.PredictandTimeseries.set_transform"]], "split() (pyesd.splitter.monthlybooststrapper method)": [[7, "pyESD.splitter.MonthlyBooststrapper.split"]], "split() (pyesd.splitter.splitter method)": [[7, "pyESD.splitter.Splitter.split"]], "split() (pyesd.splitter.yearlybootstrapper method)": [[7, "pyESD.splitter.YearlyBootstrapper.split"]], "store_csv() (in module pyesd.esd_utils)": [[7, "pyESD.ESD_utils.store_csv"]], "store_pickle() (in module pyesd.esd_utils)": [[7, "pyESD.ESD_utils.store_pickle"]], "transform() (pyesd.ensemble_models.ensembleregressor method)": [[7, "pyESD.ensemble_models.EnsembleRegressor.transform"]], "transform() (pyesd.feature_selection.recursivefeatureelimination method)": [[7, "pyESD.feature_selection.RecursiveFeatureElimination.transform"]], "transform() (pyesd.feature_selection.sequentialfeatureselection method)": [[7, "pyESD.feature_selection.SequentialFeatureSelection.transform"]], "transform() (pyesd.feature_selection.treebasedselection method)": [[7, "pyESD.feature_selection.TreeBasedSelection.transform"]], "transform() (pyesd.models.hyperparameteroptimize method)": [[7, "pyESD.models.HyperparameterOptimize.transform"]], "transform() (pyesd.standardizer.monthlystandardizer method)": [[7, "pyESD.standardizer.MonthlyStandardizer.transform"]], "transform() (pyesd.standardizer.nostandardizer method)": [[7, "pyESD.standardizer.NoStandardizer.transform"]], "transform() (pyesd.standardizer.pcascaling method)": [[7, "pyESD.standardizer.PCAScaling.transform"]], "transform() (pyesd.standardizer.standardscaling method)": [[7, "pyESD.standardizer.StandardScaling.transform"]], "tree_based_feature_importance() (pyesd.stationoperator.stationoperator method)": [[7, "pyESD.StationOperator.StationOperator.tree_based_feature_importance"]], "tree_based_feature_importance() (pyesd.predictand.predictandtimeseries method)": [[7, "pyESD.predictand.PredictandTimeseries.tree_based_feature_importance"]], "tree_based_feature_permutation_importance() (pyesd.stationoperator.stationoperator method)": [[7, "pyESD.StationOperator.StationOperator.tree_based_feature_permutation_importance"]], "tree_based_feature_permutation_importance() (pyesd.predictand.predictandtimeseries method)": [[7, "pyESD.predictand.PredictandTimeseries.tree_based_feature_permutation_importance"]]}})